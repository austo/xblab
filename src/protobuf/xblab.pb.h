// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xblab.proto

#ifndef PROTOBUF_xblab_2eproto__INCLUDED
#define PROTOBUF_xblab_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace xblab {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_xblab_2eproto();
void protobuf_AssignDesc_xblab_2eproto();
void protobuf_ShutdownFile_xblab_2eproto();

class Broadcast;
class Broadcast_Session;
class Broadcast_Payload;
class Broadcast_Prologue;
class Broadcast_Data;
class Transmission;
class Transmission_Credential;
class Transmission_Payload;
class Transmission_Data;

enum Broadcast_Type {
  Broadcast_Type_NEEDCRED = 0,
  Broadcast_Type_GROUPLIST = 1,
  Broadcast_Type_GROUPENTRY = 2,
  Broadcast_Type_BEGIN = 3,
  Broadcast_Type_BROADCAST = 4,
  Broadcast_Type_GROUPEXIT = 5,
  Broadcast_Type_QUIT = 6
};
bool Broadcast_Type_IsValid(int value);
const Broadcast_Type Broadcast_Type_Type_MIN = Broadcast_Type_NEEDCRED;
const Broadcast_Type Broadcast_Type_Type_MAX = Broadcast_Type_QUIT;
const int Broadcast_Type_Type_ARRAYSIZE = Broadcast_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Broadcast_Type_descriptor();
inline const ::std::string& Broadcast_Type_Name(Broadcast_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Broadcast_Type_descriptor(), value);
}
inline bool Broadcast_Type_Parse(
    const ::std::string& name, Broadcast_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Broadcast_Type>(
    Broadcast_Type_descriptor(), name, value);
}
enum Transmission_Type {
  Transmission_Type_CRED = 0,
  Transmission_Type_ENTER = 1,
  Transmission_Type_TRANSMIT = 2,
  Transmission_Type_EXIT = 3,
  Transmission_Type_QUIT = 4
};
bool Transmission_Type_IsValid(int value);
const Transmission_Type Transmission_Type_Type_MIN = Transmission_Type_CRED;
const Transmission_Type Transmission_Type_Type_MAX = Transmission_Type_QUIT;
const int Transmission_Type_Type_ARRAYSIZE = Transmission_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Transmission_Type_descriptor();
inline const ::std::string& Transmission_Type_Name(Transmission_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Transmission_Type_descriptor(), value);
}
inline bool Transmission_Type_Parse(
    const ::std::string& name, Transmission_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Transmission_Type>(
    Transmission_Type_descriptor(), name, value);
}
// ===================================================================

class Broadcast_Session : public ::google::protobuf::Message {
 public:
  Broadcast_Session();
  virtual ~Broadcast_Session();

  Broadcast_Session(const Broadcast_Session& from);

  inline Broadcast_Session& operator=(const Broadcast_Session& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Broadcast_Session& default_instance();

  void Swap(Broadcast_Session* other);

  // implements Message ----------------------------------------------

  Broadcast_Session* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Broadcast_Session& from);
  void MergeFrom(const Broadcast_Session& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pub_key = 1;
  inline bool has_pub_key() const;
  inline void clear_pub_key();
  static const int kPubKeyFieldNumber = 1;
  inline const ::std::string& pub_key() const;
  inline void set_pub_key(const ::std::string& value);
  inline void set_pub_key(const char* value);
  inline void set_pub_key(const char* value, size_t size);
  inline ::std::string* mutable_pub_key();
  inline ::std::string* release_pub_key();
  inline void set_allocated_pub_key(::std::string* pub_key);

  // required fixed32 seed = 2;
  inline bool has_seed() const;
  inline void clear_seed();
  static const int kSeedFieldNumber = 2;
  inline ::google::protobuf::uint32 seed() const;
  inline void set_seed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xblab.Broadcast.Session)
 private:
  inline void set_has_pub_key();
  inline void clear_has_pub_key();
  inline void set_has_seed();
  inline void clear_has_seed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pub_key_;
  ::google::protobuf::uint32 seed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_xblab_2eproto();
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Broadcast_Session* default_instance_;
};
// -------------------------------------------------------------------

class Broadcast_Payload : public ::google::protobuf::Message {
 public:
  Broadcast_Payload();
  virtual ~Broadcast_Payload();

  Broadcast_Payload(const Broadcast_Payload& from);

  inline Broadcast_Payload& operator=(const Broadcast_Payload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Broadcast_Payload& default_instance();

  void Swap(Broadcast_Payload* other);

  // implements Message ----------------------------------------------

  Broadcast_Payload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Broadcast_Payload& from);
  void MergeFrom(const Broadcast_Payload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required fixed32 modulo = 2;
  inline bool has_modulo() const;
  inline void clear_modulo();
  static const int kModuloFieldNumber = 2;
  inline ::google::protobuf::uint32 modulo() const;
  inline void set_modulo(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xblab.Broadcast.Payload)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_modulo();
  inline void clear_has_modulo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::uint32 modulo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_xblab_2eproto();
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Broadcast_Payload* default_instance_;
};
// -------------------------------------------------------------------

class Broadcast_Prologue : public ::google::protobuf::Message {
 public:
  Broadcast_Prologue();
  virtual ~Broadcast_Prologue();

  Broadcast_Prologue(const Broadcast_Prologue& from);

  inline Broadcast_Prologue& operator=(const Broadcast_Prologue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Broadcast_Prologue& default_instance();

  void Swap(Broadcast_Prologue* other);

  // implements Message ----------------------------------------------

  Broadcast_Prologue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Broadcast_Prologue& from);
  void MergeFrom(const Broadcast_Prologue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 modulo = 1;
  inline bool has_modulo() const;
  inline void clear_modulo();
  static const int kModuloFieldNumber = 1;
  inline ::google::protobuf::uint32 modulo() const;
  inline void set_modulo(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xblab.Broadcast.Prologue)
 private:
  inline void set_has_modulo();
  inline void clear_has_modulo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 modulo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_xblab_2eproto();
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Broadcast_Prologue* default_instance_;
};
// -------------------------------------------------------------------

class Broadcast_Data : public ::google::protobuf::Message {
 public:
  Broadcast_Data();
  virtual ~Broadcast_Data();

  Broadcast_Data(const Broadcast_Data& from);

  inline Broadcast_Data& operator=(const Broadcast_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Broadcast_Data& default_instance();

  void Swap(Broadcast_Data* other);

  // implements Message ----------------------------------------------

  Broadcast_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Broadcast_Data& from);
  void MergeFrom(const Broadcast_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .xblab.Broadcast.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::xblab::Broadcast_Type type() const;
  inline void set_type(::xblab::Broadcast_Type value);

  // required string nonce = 2;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 2;
  inline const ::std::string& nonce() const;
  inline void set_nonce(const ::std::string& value);
  inline void set_nonce(const char* value);
  inline void set_nonce(const char* value, size_t size);
  inline ::std::string* mutable_nonce();
  inline ::std::string* release_nonce();
  inline void set_allocated_nonce(::std::string* nonce);

  // optional .xblab.Broadcast.Session session = 3;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 3;
  inline const ::xblab::Broadcast_Session& session() const;
  inline ::xblab::Broadcast_Session* mutable_session();
  inline ::xblab::Broadcast_Session* release_session();
  inline void set_allocated_session(::xblab::Broadcast_Session* session);

  // optional .xblab.Broadcast.Prologue prologue = 4;
  inline bool has_prologue() const;
  inline void clear_prologue();
  static const int kPrologueFieldNumber = 4;
  inline const ::xblab::Broadcast_Prologue& prologue() const;
  inline ::xblab::Broadcast_Prologue* mutable_prologue();
  inline ::xblab::Broadcast_Prologue* release_prologue();
  inline void set_allocated_prologue(::xblab::Broadcast_Prologue* prologue);

  // optional .xblab.Broadcast.Payload payload = 5;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 5;
  inline const ::xblab::Broadcast_Payload& payload() const;
  inline ::xblab::Broadcast_Payload* mutable_payload();
  inline ::xblab::Broadcast_Payload* release_payload();
  inline void set_allocated_payload(::xblab::Broadcast_Payload* payload);

  // @@protoc_insertion_point(class_scope:xblab.Broadcast.Data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_prologue();
  inline void clear_has_prologue();
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nonce_;
  ::xblab::Broadcast_Session* session_;
  ::xblab::Broadcast_Prologue* prologue_;
  ::xblab::Broadcast_Payload* payload_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_xblab_2eproto();
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Broadcast_Data* default_instance_;
};
// -------------------------------------------------------------------

class Broadcast : public ::google::protobuf::Message {
 public:
  Broadcast();
  virtual ~Broadcast();

  Broadcast(const Broadcast& from);

  inline Broadcast& operator=(const Broadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Broadcast& default_instance();

  void Swap(Broadcast* other);

  // implements Message ----------------------------------------------

  Broadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Broadcast& from);
  void MergeFrom(const Broadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Broadcast_Session Session;
  typedef Broadcast_Payload Payload;
  typedef Broadcast_Prologue Prologue;
  typedef Broadcast_Data Data;

  typedef Broadcast_Type Type;
  static const Type NEEDCRED = Broadcast_Type_NEEDCRED;
  static const Type GROUPLIST = Broadcast_Type_GROUPLIST;
  static const Type GROUPENTRY = Broadcast_Type_GROUPENTRY;
  static const Type BEGIN = Broadcast_Type_BEGIN;
  static const Type BROADCAST = Broadcast_Type_BROADCAST;
  static const Type GROUPEXIT = Broadcast_Type_GROUPEXIT;
  static const Type QUIT = Broadcast_Type_QUIT;
  static inline bool Type_IsValid(int value) {
    return Broadcast_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Broadcast_Type_Type_MIN;
  static const Type Type_MAX =
    Broadcast_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Broadcast_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Broadcast_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Broadcast_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Broadcast_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string signature = 1;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 1;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // required .xblab.Broadcast.Data data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::xblab::Broadcast_Data& data() const;
  inline ::xblab::Broadcast_Data* mutable_data();
  inline ::xblab::Broadcast_Data* release_data();
  inline void set_allocated_data(::xblab::Broadcast_Data* data);

  // @@protoc_insertion_point(class_scope:xblab.Broadcast)
 private:
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* signature_;
  ::xblab::Broadcast_Data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_xblab_2eproto();
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Broadcast* default_instance_;
};
// -------------------------------------------------------------------

class Transmission_Credential : public ::google::protobuf::Message {
 public:
  Transmission_Credential();
  virtual ~Transmission_Credential();

  Transmission_Credential(const Transmission_Credential& from);

  inline Transmission_Credential& operator=(const Transmission_Credential& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transmission_Credential& default_instance();

  void Swap(Transmission_Credential* other);

  // implements Message ----------------------------------------------

  Transmission_Credential* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transmission_Credential& from);
  void MergeFrom(const Transmission_Credential& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required string group = 3;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 3;
  inline const ::std::string& group() const;
  inline void set_group(const ::std::string& value);
  inline void set_group(const char* value);
  inline void set_group(const char* value, size_t size);
  inline ::std::string* mutable_group();
  inline ::std::string* release_group();
  inline void set_allocated_group(::std::string* group);

  // required string pub_key = 4;
  inline bool has_pub_key() const;
  inline void clear_pub_key();
  static const int kPubKeyFieldNumber = 4;
  inline const ::std::string& pub_key() const;
  inline void set_pub_key(const ::std::string& value);
  inline void set_pub_key(const char* value);
  inline void set_pub_key(const char* value, size_t size);
  inline ::std::string* mutable_pub_key();
  inline ::std::string* release_pub_key();
  inline void set_allocated_pub_key(::std::string* pub_key);

  // @@protoc_insertion_point(class_scope:xblab.Transmission.Credential)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_pub_key();
  inline void clear_has_pub_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;
  ::std::string* group_;
  ::std::string* pub_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_xblab_2eproto();
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Transmission_Credential* default_instance_;
};
// -------------------------------------------------------------------

class Transmission_Payload : public ::google::protobuf::Message {
 public:
  Transmission_Payload();
  virtual ~Transmission_Payload();

  Transmission_Payload(const Transmission_Payload& from);

  inline Transmission_Payload& operator=(const Transmission_Payload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transmission_Payload& default_instance();

  void Swap(Transmission_Payload* other);

  // implements Message ----------------------------------------------

  Transmission_Payload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transmission_Payload& from);
  void MergeFrom(const Transmission_Payload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool intent = 1;
  inline bool has_intent() const;
  inline void clear_intent();
  static const int kIntentFieldNumber = 1;
  inline bool intent() const;
  inline void set_intent(bool value);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:xblab.Transmission.Payload)
 private:
  inline void set_has_intent();
  inline void clear_has_intent();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  bool intent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_xblab_2eproto();
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Transmission_Payload* default_instance_;
};
// -------------------------------------------------------------------

class Transmission_Data : public ::google::protobuf::Message {
 public:
  Transmission_Data();
  virtual ~Transmission_Data();

  Transmission_Data(const Transmission_Data& from);

  inline Transmission_Data& operator=(const Transmission_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transmission_Data& default_instance();

  void Swap(Transmission_Data* other);

  // implements Message ----------------------------------------------

  Transmission_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transmission_Data& from);
  void MergeFrom(const Transmission_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .xblab.Transmission.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::xblab::Transmission_Type type() const;
  inline void set_type(::xblab::Transmission_Type value);

  // required string nonce = 2;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 2;
  inline const ::std::string& nonce() const;
  inline void set_nonce(const ::std::string& value);
  inline void set_nonce(const char* value);
  inline void set_nonce(const char* value, size_t size);
  inline ::std::string* mutable_nonce();
  inline ::std::string* release_nonce();
  inline void set_allocated_nonce(::std::string* nonce);

  // optional .xblab.Transmission.Credential credential = 3;
  inline bool has_credential() const;
  inline void clear_credential();
  static const int kCredentialFieldNumber = 3;
  inline const ::xblab::Transmission_Credential& credential() const;
  inline ::xblab::Transmission_Credential* mutable_credential();
  inline ::xblab::Transmission_Credential* release_credential();
  inline void set_allocated_credential(::xblab::Transmission_Credential* credential);

  // optional .xblab.Transmission.Payload payload = 4;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 4;
  inline const ::xblab::Transmission_Payload& payload() const;
  inline ::xblab::Transmission_Payload* mutable_payload();
  inline ::xblab::Transmission_Payload* release_payload();
  inline void set_allocated_payload(::xblab::Transmission_Payload* payload);

  // @@protoc_insertion_point(class_scope:xblab.Transmission.Data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_credential();
  inline void clear_has_credential();
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nonce_;
  ::xblab::Transmission_Credential* credential_;
  ::xblab::Transmission_Payload* payload_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_xblab_2eproto();
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Transmission_Data* default_instance_;
};
// -------------------------------------------------------------------

class Transmission : public ::google::protobuf::Message {
 public:
  Transmission();
  virtual ~Transmission();

  Transmission(const Transmission& from);

  inline Transmission& operator=(const Transmission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transmission& default_instance();

  void Swap(Transmission* other);

  // implements Message ----------------------------------------------

  Transmission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transmission& from);
  void MergeFrom(const Transmission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Transmission_Credential Credential;
  typedef Transmission_Payload Payload;
  typedef Transmission_Data Data;

  typedef Transmission_Type Type;
  static const Type CRED = Transmission_Type_CRED;
  static const Type ENTER = Transmission_Type_ENTER;
  static const Type TRANSMIT = Transmission_Type_TRANSMIT;
  static const Type EXIT = Transmission_Type_EXIT;
  static const Type QUIT = Transmission_Type_QUIT;
  static inline bool Type_IsValid(int value) {
    return Transmission_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Transmission_Type_Type_MIN;
  static const Type Type_MAX =
    Transmission_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Transmission_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Transmission_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Transmission_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Transmission_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string signature = 1;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 1;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // required .xblab.Transmission.Data data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::xblab::Transmission_Data& data() const;
  inline ::xblab::Transmission_Data* mutable_data();
  inline ::xblab::Transmission_Data* release_data();
  inline void set_allocated_data(::xblab::Transmission_Data* data);

  // @@protoc_insertion_point(class_scope:xblab.Transmission)
 private:
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* signature_;
  ::xblab::Transmission_Data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_xblab_2eproto();
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Transmission* default_instance_;
};
// ===================================================================


// ===================================================================

// Broadcast_Session

// required string pub_key = 1;
inline bool Broadcast_Session::has_pub_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broadcast_Session::set_has_pub_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broadcast_Session::clear_has_pub_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broadcast_Session::clear_pub_key() {
  if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
    pub_key_->clear();
  }
  clear_has_pub_key();
}
inline const ::std::string& Broadcast_Session::pub_key() const {
  return *pub_key_;
}
inline void Broadcast_Session::set_pub_key(const ::std::string& value) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(value);
}
inline void Broadcast_Session::set_pub_key(const char* value) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(value);
}
inline void Broadcast_Session::set_pub_key(const char* value, size_t size) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Broadcast_Session::mutable_pub_key() {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  return pub_key_;
}
inline ::std::string* Broadcast_Session::release_pub_key() {
  clear_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pub_key_;
    pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Broadcast_Session::set_allocated_pub_key(::std::string* pub_key) {
  if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
    delete pub_key_;
  }
  if (pub_key) {
    set_has_pub_key();
    pub_key_ = pub_key;
  } else {
    clear_has_pub_key();
    pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed32 seed = 2;
inline bool Broadcast_Session::has_seed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Broadcast_Session::set_has_seed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Broadcast_Session::clear_has_seed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Broadcast_Session::clear_seed() {
  seed_ = 0u;
  clear_has_seed();
}
inline ::google::protobuf::uint32 Broadcast_Session::seed() const {
  return seed_;
}
inline void Broadcast_Session::set_seed(::google::protobuf::uint32 value) {
  set_has_seed();
  seed_ = value;
}

// -------------------------------------------------------------------

// Broadcast_Payload

// required string content = 1;
inline bool Broadcast_Payload::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broadcast_Payload::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broadcast_Payload::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broadcast_Payload::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Broadcast_Payload::content() const {
  return *content_;
}
inline void Broadcast_Payload::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Broadcast_Payload::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Broadcast_Payload::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Broadcast_Payload::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Broadcast_Payload::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Broadcast_Payload::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed32 modulo = 2;
inline bool Broadcast_Payload::has_modulo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Broadcast_Payload::set_has_modulo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Broadcast_Payload::clear_has_modulo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Broadcast_Payload::clear_modulo() {
  modulo_ = 0u;
  clear_has_modulo();
}
inline ::google::protobuf::uint32 Broadcast_Payload::modulo() const {
  return modulo_;
}
inline void Broadcast_Payload::set_modulo(::google::protobuf::uint32 value) {
  set_has_modulo();
  modulo_ = value;
}

// -------------------------------------------------------------------

// Broadcast_Prologue

// required fixed32 modulo = 1;
inline bool Broadcast_Prologue::has_modulo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broadcast_Prologue::set_has_modulo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broadcast_Prologue::clear_has_modulo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broadcast_Prologue::clear_modulo() {
  modulo_ = 0u;
  clear_has_modulo();
}
inline ::google::protobuf::uint32 Broadcast_Prologue::modulo() const {
  return modulo_;
}
inline void Broadcast_Prologue::set_modulo(::google::protobuf::uint32 value) {
  set_has_modulo();
  modulo_ = value;
}

// -------------------------------------------------------------------

// Broadcast_Data

// required .xblab.Broadcast.Type type = 1;
inline bool Broadcast_Data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broadcast_Data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broadcast_Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broadcast_Data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::xblab::Broadcast_Type Broadcast_Data::type() const {
  return static_cast< ::xblab::Broadcast_Type >(type_);
}
inline void Broadcast_Data::set_type(::xblab::Broadcast_Type value) {
  assert(::xblab::Broadcast_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string nonce = 2;
inline bool Broadcast_Data::has_nonce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Broadcast_Data::set_has_nonce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Broadcast_Data::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Broadcast_Data::clear_nonce() {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    nonce_->clear();
  }
  clear_has_nonce();
}
inline const ::std::string& Broadcast_Data::nonce() const {
  return *nonce_;
}
inline void Broadcast_Data::set_nonce(const ::std::string& value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
}
inline void Broadcast_Data::set_nonce(const char* value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
}
inline void Broadcast_Data::set_nonce(const char* value, size_t size) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Broadcast_Data::mutable_nonce() {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  return nonce_;
}
inline ::std::string* Broadcast_Data::release_nonce() {
  clear_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nonce_;
    nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Broadcast_Data::set_allocated_nonce(::std::string* nonce) {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete nonce_;
  }
  if (nonce) {
    set_has_nonce();
    nonce_ = nonce;
  } else {
    clear_has_nonce();
    nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .xblab.Broadcast.Session session = 3;
inline bool Broadcast_Data::has_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Broadcast_Data::set_has_session() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Broadcast_Data::clear_has_session() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Broadcast_Data::clear_session() {
  if (session_ != NULL) session_->::xblab::Broadcast_Session::Clear();
  clear_has_session();
}
inline const ::xblab::Broadcast_Session& Broadcast_Data::session() const {
  return session_ != NULL ? *session_ : *default_instance_->session_;
}
inline ::xblab::Broadcast_Session* Broadcast_Data::mutable_session() {
  set_has_session();
  if (session_ == NULL) session_ = new ::xblab::Broadcast_Session;
  return session_;
}
inline ::xblab::Broadcast_Session* Broadcast_Data::release_session() {
  clear_has_session();
  ::xblab::Broadcast_Session* temp = session_;
  session_ = NULL;
  return temp;
}
inline void Broadcast_Data::set_allocated_session(::xblab::Broadcast_Session* session) {
  delete session_;
  session_ = session;
  if (session) {
    set_has_session();
  } else {
    clear_has_session();
  }
}

// optional .xblab.Broadcast.Prologue prologue = 4;
inline bool Broadcast_Data::has_prologue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Broadcast_Data::set_has_prologue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Broadcast_Data::clear_has_prologue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Broadcast_Data::clear_prologue() {
  if (prologue_ != NULL) prologue_->::xblab::Broadcast_Prologue::Clear();
  clear_has_prologue();
}
inline const ::xblab::Broadcast_Prologue& Broadcast_Data::prologue() const {
  return prologue_ != NULL ? *prologue_ : *default_instance_->prologue_;
}
inline ::xblab::Broadcast_Prologue* Broadcast_Data::mutable_prologue() {
  set_has_prologue();
  if (prologue_ == NULL) prologue_ = new ::xblab::Broadcast_Prologue;
  return prologue_;
}
inline ::xblab::Broadcast_Prologue* Broadcast_Data::release_prologue() {
  clear_has_prologue();
  ::xblab::Broadcast_Prologue* temp = prologue_;
  prologue_ = NULL;
  return temp;
}
inline void Broadcast_Data::set_allocated_prologue(::xblab::Broadcast_Prologue* prologue) {
  delete prologue_;
  prologue_ = prologue;
  if (prologue) {
    set_has_prologue();
  } else {
    clear_has_prologue();
  }
}

// optional .xblab.Broadcast.Payload payload = 5;
inline bool Broadcast_Data::has_payload() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Broadcast_Data::set_has_payload() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Broadcast_Data::clear_has_payload() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Broadcast_Data::clear_payload() {
  if (payload_ != NULL) payload_->::xblab::Broadcast_Payload::Clear();
  clear_has_payload();
}
inline const ::xblab::Broadcast_Payload& Broadcast_Data::payload() const {
  return payload_ != NULL ? *payload_ : *default_instance_->payload_;
}
inline ::xblab::Broadcast_Payload* Broadcast_Data::mutable_payload() {
  set_has_payload();
  if (payload_ == NULL) payload_ = new ::xblab::Broadcast_Payload;
  return payload_;
}
inline ::xblab::Broadcast_Payload* Broadcast_Data::release_payload() {
  clear_has_payload();
  ::xblab::Broadcast_Payload* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline void Broadcast_Data::set_allocated_payload(::xblab::Broadcast_Payload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
}

// -------------------------------------------------------------------

// Broadcast

// required string signature = 1;
inline bool Broadcast::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broadcast::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broadcast::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broadcast::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& Broadcast::signature() const {
  return *signature_;
}
inline void Broadcast::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Broadcast::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Broadcast::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Broadcast::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* Broadcast::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Broadcast::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .xblab.Broadcast.Data data = 2;
inline bool Broadcast::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Broadcast::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Broadcast::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Broadcast::clear_data() {
  if (data_ != NULL) data_->::xblab::Broadcast_Data::Clear();
  clear_has_data();
}
inline const ::xblab::Broadcast_Data& Broadcast::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::xblab::Broadcast_Data* Broadcast::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::xblab::Broadcast_Data;
  return data_;
}
inline ::xblab::Broadcast_Data* Broadcast::release_data() {
  clear_has_data();
  ::xblab::Broadcast_Data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void Broadcast::set_allocated_data(::xblab::Broadcast_Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// Transmission_Credential

// required string username = 1;
inline bool Transmission_Credential::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transmission_Credential::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transmission_Credential::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transmission_Credential::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Transmission_Credential::username() const {
  return *username_;
}
inline void Transmission_Credential::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Transmission_Credential::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Transmission_Credential::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Credential::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* Transmission_Credential::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Credential::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool Transmission_Credential::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transmission_Credential::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transmission_Credential::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transmission_Credential::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Transmission_Credential::password() const {
  return *password_;
}
inline void Transmission_Credential::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Transmission_Credential::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Transmission_Credential::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Credential::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Transmission_Credential::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Credential::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string group = 3;
inline bool Transmission_Credential::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transmission_Credential::set_has_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transmission_Credential::clear_has_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transmission_Credential::clear_group() {
  if (group_ != &::google::protobuf::internal::kEmptyString) {
    group_->clear();
  }
  clear_has_group();
}
inline const ::std::string& Transmission_Credential::group() const {
  return *group_;
}
inline void Transmission_Credential::set_group(const ::std::string& value) {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  group_->assign(value);
}
inline void Transmission_Credential::set_group(const char* value) {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  group_->assign(value);
}
inline void Transmission_Credential::set_group(const char* value, size_t size) {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  group_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Credential::mutable_group() {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  return group_;
}
inline ::std::string* Transmission_Credential::release_group() {
  clear_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_;
    group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Credential::set_allocated_group(::std::string* group) {
  if (group_ != &::google::protobuf::internal::kEmptyString) {
    delete group_;
  }
  if (group) {
    set_has_group();
    group_ = group;
  } else {
    clear_has_group();
    group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pub_key = 4;
inline bool Transmission_Credential::has_pub_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transmission_Credential::set_has_pub_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transmission_Credential::clear_has_pub_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transmission_Credential::clear_pub_key() {
  if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
    pub_key_->clear();
  }
  clear_has_pub_key();
}
inline const ::std::string& Transmission_Credential::pub_key() const {
  return *pub_key_;
}
inline void Transmission_Credential::set_pub_key(const ::std::string& value) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(value);
}
inline void Transmission_Credential::set_pub_key(const char* value) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(value);
}
inline void Transmission_Credential::set_pub_key(const char* value, size_t size) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Credential::mutable_pub_key() {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  return pub_key_;
}
inline ::std::string* Transmission_Credential::release_pub_key() {
  clear_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pub_key_;
    pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Credential::set_allocated_pub_key(::std::string* pub_key) {
  if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
    delete pub_key_;
  }
  if (pub_key) {
    set_has_pub_key();
    pub_key_ = pub_key;
  } else {
    clear_has_pub_key();
    pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Transmission_Payload

// required bool intent = 1;
inline bool Transmission_Payload::has_intent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transmission_Payload::set_has_intent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transmission_Payload::clear_has_intent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transmission_Payload::clear_intent() {
  intent_ = false;
  clear_has_intent();
}
inline bool Transmission_Payload::intent() const {
  return intent_;
}
inline void Transmission_Payload::set_intent(bool value) {
  set_has_intent();
  intent_ = value;
}

// required string content = 2;
inline bool Transmission_Payload::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transmission_Payload::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transmission_Payload::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transmission_Payload::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Transmission_Payload::content() const {
  return *content_;
}
inline void Transmission_Payload::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Transmission_Payload::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Transmission_Payload::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Payload::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Transmission_Payload::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Payload::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Transmission_Data

// required .xblab.Transmission.Type type = 1;
inline bool Transmission_Data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transmission_Data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transmission_Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transmission_Data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::xblab::Transmission_Type Transmission_Data::type() const {
  return static_cast< ::xblab::Transmission_Type >(type_);
}
inline void Transmission_Data::set_type(::xblab::Transmission_Type value) {
  assert(::xblab::Transmission_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string nonce = 2;
inline bool Transmission_Data::has_nonce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transmission_Data::set_has_nonce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transmission_Data::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transmission_Data::clear_nonce() {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    nonce_->clear();
  }
  clear_has_nonce();
}
inline const ::std::string& Transmission_Data::nonce() const {
  return *nonce_;
}
inline void Transmission_Data::set_nonce(const ::std::string& value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
}
inline void Transmission_Data::set_nonce(const char* value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
}
inline void Transmission_Data::set_nonce(const char* value, size_t size) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Data::mutable_nonce() {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  return nonce_;
}
inline ::std::string* Transmission_Data::release_nonce() {
  clear_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nonce_;
    nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Data::set_allocated_nonce(::std::string* nonce) {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete nonce_;
  }
  if (nonce) {
    set_has_nonce();
    nonce_ = nonce;
  } else {
    clear_has_nonce();
    nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .xblab.Transmission.Credential credential = 3;
inline bool Transmission_Data::has_credential() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transmission_Data::set_has_credential() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transmission_Data::clear_has_credential() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transmission_Data::clear_credential() {
  if (credential_ != NULL) credential_->::xblab::Transmission_Credential::Clear();
  clear_has_credential();
}
inline const ::xblab::Transmission_Credential& Transmission_Data::credential() const {
  return credential_ != NULL ? *credential_ : *default_instance_->credential_;
}
inline ::xblab::Transmission_Credential* Transmission_Data::mutable_credential() {
  set_has_credential();
  if (credential_ == NULL) credential_ = new ::xblab::Transmission_Credential;
  return credential_;
}
inline ::xblab::Transmission_Credential* Transmission_Data::release_credential() {
  clear_has_credential();
  ::xblab::Transmission_Credential* temp = credential_;
  credential_ = NULL;
  return temp;
}
inline void Transmission_Data::set_allocated_credential(::xblab::Transmission_Credential* credential) {
  delete credential_;
  credential_ = credential;
  if (credential) {
    set_has_credential();
  } else {
    clear_has_credential();
  }
}

// optional .xblab.Transmission.Payload payload = 4;
inline bool Transmission_Data::has_payload() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transmission_Data::set_has_payload() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transmission_Data::clear_has_payload() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transmission_Data::clear_payload() {
  if (payload_ != NULL) payload_->::xblab::Transmission_Payload::Clear();
  clear_has_payload();
}
inline const ::xblab::Transmission_Payload& Transmission_Data::payload() const {
  return payload_ != NULL ? *payload_ : *default_instance_->payload_;
}
inline ::xblab::Transmission_Payload* Transmission_Data::mutable_payload() {
  set_has_payload();
  if (payload_ == NULL) payload_ = new ::xblab::Transmission_Payload;
  return payload_;
}
inline ::xblab::Transmission_Payload* Transmission_Data::release_payload() {
  clear_has_payload();
  ::xblab::Transmission_Payload* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline void Transmission_Data::set_allocated_payload(::xblab::Transmission_Payload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
}

// -------------------------------------------------------------------

// Transmission

// required string signature = 1;
inline bool Transmission::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transmission::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transmission::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transmission::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& Transmission::signature() const {
  return *signature_;
}
inline void Transmission::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Transmission::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Transmission::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* Transmission::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .xblab.Transmission.Data data = 2;
inline bool Transmission::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transmission::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transmission::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transmission::clear_data() {
  if (data_ != NULL) data_->::xblab::Transmission_Data::Clear();
  clear_has_data();
}
inline const ::xblab::Transmission_Data& Transmission::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::xblab::Transmission_Data* Transmission::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::xblab::Transmission_Data;
  return data_;
}
inline ::xblab::Transmission_Data* Transmission::release_data() {
  clear_has_data();
  ::xblab::Transmission_Data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void Transmission::set_allocated_data(::xblab::Transmission_Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xblab

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xblab::Broadcast_Type>() {
  return ::xblab::Broadcast_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xblab::Transmission_Type>() {
  return ::xblab::Transmission_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_xblab_2eproto__INCLUDED
