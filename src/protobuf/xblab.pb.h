// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xblab.proto

#ifndef PROTOBUF_xblab_2eproto__INCLUDED
#define PROTOBUF_xblab_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace xblab {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_xblab_2eproto();
void protobuf_AssignDesc_xblab_2eproto();
void protobuf_ShutdownFile_xblab_2eproto();

class Broadcast;
class Broadcast_Session;
class Broadcast_Payload;
class Broadcast_Prologue;
class Broadcast_Error;
class Broadcast_No_Op;
class Broadcast_Data;
class Transmission;
class Transmission_Credential;
class Transmission_Payload;
class Transmission_Error;
class Transmission_No_Op;
class Transmission_Data;

enum Broadcast_Type {
  Broadcast_Type_NEEDCRED = 0,
  Broadcast_Type_GROUPLIST = 1,
  Broadcast_Type_GROUPENTRY = 2,
  Broadcast_Type_SETUP = 3,
  Broadcast_Type_BEGIN = 4,
  Broadcast_Type_BROADCAST = 5,
  Broadcast_Type_GROUPEXIT = 6,
  Broadcast_Type_QUIT = 7,
  Broadcast_Type_ERROR = 8,
  Broadcast_Type_NO_OP = 9
};
bool Broadcast_Type_IsValid(int value);
const Broadcast_Type Broadcast_Type_Type_MIN = Broadcast_Type_NEEDCRED;
const Broadcast_Type Broadcast_Type_Type_MAX = Broadcast_Type_NO_OP;
const int Broadcast_Type_Type_ARRAYSIZE = Broadcast_Type_Type_MAX + 1;

enum Transmission_Type {
  Transmission_Type_CRED = 0,
  Transmission_Type_ENTER = 1,
  Transmission_Type_TRANSMIT = 2,
  Transmission_Type_EXIT = 3,
  Transmission_Type_QUIT = 4,
  Transmission_Type_ERROR = 5,
  Transmission_Type_NO_OP = 6,
  Transmission_Type_READY = 7
};
bool Transmission_Type_IsValid(int value);
const Transmission_Type Transmission_Type_Type_MIN = Transmission_Type_CRED;
const Transmission_Type Transmission_Type_Type_MAX = Transmission_Type_READY;
const int Transmission_Type_Type_ARRAYSIZE = Transmission_Type_Type_MAX + 1;

// ===================================================================

class Broadcast_Session : public ::google::protobuf::MessageLite {
 public:
  Broadcast_Session();
  virtual ~Broadcast_Session();

  Broadcast_Session(const Broadcast_Session& from);

  inline Broadcast_Session& operator=(const Broadcast_Session& from) {
    CopyFrom(from);
    return *this;
  }

  static const Broadcast_Session& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Broadcast_Session* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Broadcast_Session* other);

  // implements Message ----------------------------------------------

  Broadcast_Session* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Broadcast_Session& from);
  void MergeFrom(const Broadcast_Session& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pub_key = 1;
  inline bool has_pub_key() const;
  inline void clear_pub_key();
  static const int kPubKeyFieldNumber = 1;
  inline const ::std::string& pub_key() const;
  inline void set_pub_key(const ::std::string& value);
  inline void set_pub_key(const char* value);
  inline void set_pub_key(const char* value, size_t size);
  inline ::std::string* mutable_pub_key();
  inline ::std::string* release_pub_key();
  inline void set_allocated_pub_key(::std::string* pub_key);

  // required bytes schedule = 2;
  inline bool has_schedule() const;
  inline void clear_schedule();
  static const int kScheduleFieldNumber = 2;
  inline const ::std::string& schedule() const;
  inline void set_schedule(const ::std::string& value);
  inline void set_schedule(const char* value);
  inline void set_schedule(const void* value, size_t size);
  inline ::std::string* mutable_schedule();
  inline ::std::string* release_schedule();
  inline void set_allocated_schedule(::std::string* schedule);

  // optional fixed32 schedule_size = 3;
  inline bool has_schedule_size() const;
  inline void clear_schedule_size();
  static const int kScheduleSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 schedule_size() const;
  inline void set_schedule_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xblab.Broadcast.Session)
 private:
  inline void set_has_pub_key();
  inline void clear_has_pub_key();
  inline void set_has_schedule();
  inline void clear_has_schedule();
  inline void set_has_schedule_size();
  inline void clear_has_schedule_size();

  ::std::string* pub_key_;
  ::std::string* schedule_;
  ::google::protobuf::uint32 schedule_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_xblab_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_xblab_2eproto();
  #endif
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Broadcast_Session* default_instance_;
};
// -------------------------------------------------------------------

class Broadcast_Payload : public ::google::protobuf::MessageLite {
 public:
  Broadcast_Payload();
  virtual ~Broadcast_Payload();

  Broadcast_Payload(const Broadcast_Payload& from);

  inline Broadcast_Payload& operator=(const Broadcast_Payload& from) {
    CopyFrom(from);
    return *this;
  }

  static const Broadcast_Payload& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Broadcast_Payload* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Broadcast_Payload* other);

  // implements Message ----------------------------------------------

  Broadcast_Payload* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Broadcast_Payload& from);
  void MergeFrom(const Broadcast_Payload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_important = 1;
  inline bool has_is_important() const;
  inline void clear_is_important();
  static const int kIsImportantFieldNumber = 1;
  inline bool is_important() const;
  inline void set_is_important(bool value);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required fixed32 modulo = 3;
  inline bool has_modulo() const;
  inline void clear_modulo();
  static const int kModuloFieldNumber = 3;
  inline ::google::protobuf::uint32 modulo() const;
  inline void set_modulo(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xblab.Broadcast.Payload)
 private:
  inline void set_has_is_important();
  inline void clear_has_is_important();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_modulo();
  inline void clear_has_modulo();

  ::std::string* content_;
  bool is_important_;
  ::google::protobuf::uint32 modulo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_xblab_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_xblab_2eproto();
  #endif
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Broadcast_Payload* default_instance_;
};
// -------------------------------------------------------------------

class Broadcast_Prologue : public ::google::protobuf::MessageLite {
 public:
  Broadcast_Prologue();
  virtual ~Broadcast_Prologue();

  Broadcast_Prologue(const Broadcast_Prologue& from);

  inline Broadcast_Prologue& operator=(const Broadcast_Prologue& from) {
    CopyFrom(from);
    return *this;
  }

  static const Broadcast_Prologue& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Broadcast_Prologue* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Broadcast_Prologue* other);

  // implements Message ----------------------------------------------

  Broadcast_Prologue* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Broadcast_Prologue& from);
  void MergeFrom(const Broadcast_Prologue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 modulo = 1;
  inline bool has_modulo() const;
  inline void clear_modulo();
  static const int kModuloFieldNumber = 1;
  inline ::google::protobuf::uint32 modulo() const;
  inline void set_modulo(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xblab.Broadcast.Prologue)
 private:
  inline void set_has_modulo();
  inline void clear_has_modulo();

  ::google::protobuf::uint32 modulo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_xblab_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_xblab_2eproto();
  #endif
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Broadcast_Prologue* default_instance_;
};
// -------------------------------------------------------------------

class Broadcast_Error : public ::google::protobuf::MessageLite {
 public:
  Broadcast_Error();
  virtual ~Broadcast_Error();

  Broadcast_Error(const Broadcast_Error& from);

  inline Broadcast_Error& operator=(const Broadcast_Error& from) {
    CopyFrom(from);
    return *this;
  }

  static const Broadcast_Error& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Broadcast_Error* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Broadcast_Error* other);

  // implements Message ----------------------------------------------

  Broadcast_Error* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Broadcast_Error& from);
  void MergeFrom(const Broadcast_Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string what = 1;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 1;
  inline const ::std::string& what() const;
  inline void set_what(const ::std::string& value);
  inline void set_what(const char* value);
  inline void set_what(const char* value, size_t size);
  inline ::std::string* mutable_what();
  inline ::std::string* release_what();
  inline void set_allocated_what(::std::string* what);

  // @@protoc_insertion_point(class_scope:xblab.Broadcast.Error)
 private:
  inline void set_has_what();
  inline void clear_has_what();

  ::std::string* what_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_xblab_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_xblab_2eproto();
  #endif
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Broadcast_Error* default_instance_;
};
// -------------------------------------------------------------------

class Broadcast_No_Op : public ::google::protobuf::MessageLite {
 public:
  Broadcast_No_Op();
  virtual ~Broadcast_No_Op();

  Broadcast_No_Op(const Broadcast_No_Op& from);

  inline Broadcast_No_Op& operator=(const Broadcast_No_Op& from) {
    CopyFrom(from);
    return *this;
  }

  static const Broadcast_No_Op& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Broadcast_No_Op* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Broadcast_No_Op* other);

  // implements Message ----------------------------------------------

  Broadcast_No_Op* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Broadcast_No_Op& from);
  void MergeFrom(const Broadcast_No_Op& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string what = 1;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 1;
  inline const ::std::string& what() const;
  inline void set_what(const ::std::string& value);
  inline void set_what(const char* value);
  inline void set_what(const char* value, size_t size);
  inline ::std::string* mutable_what();
  inline ::std::string* release_what();
  inline void set_allocated_what(::std::string* what);

  // @@protoc_insertion_point(class_scope:xblab.Broadcast.No_Op)
 private:
  inline void set_has_what();
  inline void clear_has_what();

  ::std::string* what_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_xblab_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_xblab_2eproto();
  #endif
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Broadcast_No_Op* default_instance_;
};
// -------------------------------------------------------------------

class Broadcast_Data : public ::google::protobuf::MessageLite {
 public:
  Broadcast_Data();
  virtual ~Broadcast_Data();

  Broadcast_Data(const Broadcast_Data& from);

  inline Broadcast_Data& operator=(const Broadcast_Data& from) {
    CopyFrom(from);
    return *this;
  }

  static const Broadcast_Data& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Broadcast_Data* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Broadcast_Data* other);

  // implements Message ----------------------------------------------

  Broadcast_Data* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Broadcast_Data& from);
  void MergeFrom(const Broadcast_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .xblab.Broadcast.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::xblab::Broadcast_Type type() const;
  inline void set_type(::xblab::Broadcast_Type value);

  // required string nonce = 2;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 2;
  inline const ::std::string& nonce() const;
  inline void set_nonce(const ::std::string& value);
  inline void set_nonce(const char* value);
  inline void set_nonce(const char* value, size_t size);
  inline ::std::string* mutable_nonce();
  inline ::std::string* release_nonce();
  inline void set_allocated_nonce(::std::string* nonce);

  // optional string return_nonce = 3;
  inline bool has_return_nonce() const;
  inline void clear_return_nonce();
  static const int kReturnNonceFieldNumber = 3;
  inline const ::std::string& return_nonce() const;
  inline void set_return_nonce(const ::std::string& value);
  inline void set_return_nonce(const char* value);
  inline void set_return_nonce(const char* value, size_t size);
  inline ::std::string* mutable_return_nonce();
  inline ::std::string* release_return_nonce();
  inline void set_allocated_return_nonce(::std::string* return_nonce);

  // optional .xblab.Broadcast.Session session = 4;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 4;
  inline const ::xblab::Broadcast_Session& session() const;
  inline ::xblab::Broadcast_Session* mutable_session();
  inline ::xblab::Broadcast_Session* release_session();
  inline void set_allocated_session(::xblab::Broadcast_Session* session);

  // optional .xblab.Broadcast.Prologue prologue = 5;
  inline bool has_prologue() const;
  inline void clear_prologue();
  static const int kPrologueFieldNumber = 5;
  inline const ::xblab::Broadcast_Prologue& prologue() const;
  inline ::xblab::Broadcast_Prologue* mutable_prologue();
  inline ::xblab::Broadcast_Prologue* release_prologue();
  inline void set_allocated_prologue(::xblab::Broadcast_Prologue* prologue);

  // optional .xblab.Broadcast.Payload payload = 6;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 6;
  inline const ::xblab::Broadcast_Payload& payload() const;
  inline ::xblab::Broadcast_Payload* mutable_payload();
  inline ::xblab::Broadcast_Payload* release_payload();
  inline void set_allocated_payload(::xblab::Broadcast_Payload* payload);

  // optional .xblab.Broadcast.Error error = 7;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 7;
  inline const ::xblab::Broadcast_Error& error() const;
  inline ::xblab::Broadcast_Error* mutable_error();
  inline ::xblab::Broadcast_Error* release_error();
  inline void set_allocated_error(::xblab::Broadcast_Error* error);

  // optional .xblab.Broadcast.No_Op no_op = 8;
  inline bool has_no_op() const;
  inline void clear_no_op();
  static const int kNoOpFieldNumber = 8;
  inline const ::xblab::Broadcast_No_Op& no_op() const;
  inline ::xblab::Broadcast_No_Op* mutable_no_op();
  inline ::xblab::Broadcast_No_Op* release_no_op();
  inline void set_allocated_no_op(::xblab::Broadcast_No_Op* no_op);

  // @@protoc_insertion_point(class_scope:xblab.Broadcast.Data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_return_nonce();
  inline void clear_has_return_nonce();
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_prologue();
  inline void clear_has_prologue();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_no_op();
  inline void clear_has_no_op();

  ::std::string* nonce_;
  ::std::string* return_nonce_;
  ::xblab::Broadcast_Session* session_;
  ::xblab::Broadcast_Prologue* prologue_;
  ::xblab::Broadcast_Payload* payload_;
  ::xblab::Broadcast_Error* error_;
  ::xblab::Broadcast_No_Op* no_op_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_xblab_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_xblab_2eproto();
  #endif
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Broadcast_Data* default_instance_;
};
// -------------------------------------------------------------------

class Broadcast : public ::google::protobuf::MessageLite {
 public:
  Broadcast();
  virtual ~Broadcast();

  Broadcast(const Broadcast& from);

  inline Broadcast& operator=(const Broadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const Broadcast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Broadcast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Broadcast* other);

  // implements Message ----------------------------------------------

  Broadcast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Broadcast& from);
  void MergeFrom(const Broadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Broadcast_Session Session;
  typedef Broadcast_Payload Payload;
  typedef Broadcast_Prologue Prologue;
  typedef Broadcast_Error Error;
  typedef Broadcast_No_Op No_Op;
  typedef Broadcast_Data Data;

  typedef Broadcast_Type Type;
  static const Type NEEDCRED = Broadcast_Type_NEEDCRED;
  static const Type GROUPLIST = Broadcast_Type_GROUPLIST;
  static const Type GROUPENTRY = Broadcast_Type_GROUPENTRY;
  static const Type SETUP = Broadcast_Type_SETUP;
  static const Type BEGIN = Broadcast_Type_BEGIN;
  static const Type BROADCAST = Broadcast_Type_BROADCAST;
  static const Type GROUPEXIT = Broadcast_Type_GROUPEXIT;
  static const Type QUIT = Broadcast_Type_QUIT;
  static const Type ERROR = Broadcast_Type_ERROR;
  static const Type NO_OP = Broadcast_Type_NO_OP;
  static inline bool Type_IsValid(int value) {
    return Broadcast_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Broadcast_Type_Type_MIN;
  static const Type Type_MAX =
    Broadcast_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Broadcast_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string signature = 1;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 1;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // required .xblab.Broadcast.Data data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::xblab::Broadcast_Data& data() const;
  inline ::xblab::Broadcast_Data* mutable_data();
  inline ::xblab::Broadcast_Data* release_data();
  inline void set_allocated_data(::xblab::Broadcast_Data* data);

  // @@protoc_insertion_point(class_scope:xblab.Broadcast)
 private:
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_data();
  inline void clear_has_data();

  ::std::string* signature_;
  ::xblab::Broadcast_Data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_xblab_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_xblab_2eproto();
  #endif
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Broadcast* default_instance_;
};
// -------------------------------------------------------------------

class Transmission_Credential : public ::google::protobuf::MessageLite {
 public:
  Transmission_Credential();
  virtual ~Transmission_Credential();

  Transmission_Credential(const Transmission_Credential& from);

  inline Transmission_Credential& operator=(const Transmission_Credential& from) {
    CopyFrom(from);
    return *this;
  }

  static const Transmission_Credential& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Transmission_Credential* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Transmission_Credential* other);

  // implements Message ----------------------------------------------

  Transmission_Credential* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Transmission_Credential& from);
  void MergeFrom(const Transmission_Credential& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string group = 3;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 3;
  inline const ::std::string& group() const;
  inline void set_group(const ::std::string& value);
  inline void set_group(const char* value);
  inline void set_group(const char* value, size_t size);
  inline ::std::string* mutable_group();
  inline ::std::string* release_group();
  inline void set_allocated_group(::std::string* group);

  // required string pub_key = 4;
  inline bool has_pub_key() const;
  inline void clear_pub_key();
  static const int kPubKeyFieldNumber = 4;
  inline const ::std::string& pub_key() const;
  inline void set_pub_key(const ::std::string& value);
  inline void set_pub_key(const char* value);
  inline void set_pub_key(const char* value, size_t size);
  inline ::std::string* mutable_pub_key();
  inline ::std::string* release_pub_key();
  inline void set_allocated_pub_key(::std::string* pub_key);

  // @@protoc_insertion_point(class_scope:xblab.Transmission.Credential)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_pub_key();
  inline void clear_has_pub_key();

  ::std::string* username_;
  ::std::string* password_;
  ::std::string* group_;
  ::std::string* pub_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_xblab_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_xblab_2eproto();
  #endif
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Transmission_Credential* default_instance_;
};
// -------------------------------------------------------------------

class Transmission_Payload : public ::google::protobuf::MessageLite {
 public:
  Transmission_Payload();
  virtual ~Transmission_Payload();

  Transmission_Payload(const Transmission_Payload& from);

  inline Transmission_Payload& operator=(const Transmission_Payload& from) {
    CopyFrom(from);
    return *this;
  }

  static const Transmission_Payload& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Transmission_Payload* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Transmission_Payload* other);

  // implements Message ----------------------------------------------

  Transmission_Payload* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Transmission_Payload& from);
  void MergeFrom(const Transmission_Payload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_important = 1;
  inline bool has_is_important() const;
  inline void clear_is_important();
  static const int kIsImportantFieldNumber = 1;
  inline bool is_important() const;
  inline void set_is_important(bool value);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:xblab.Transmission.Payload)
 private:
  inline void set_has_is_important();
  inline void clear_has_is_important();
  inline void set_has_content();
  inline void clear_has_content();

  ::std::string* content_;
  bool is_important_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_xblab_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_xblab_2eproto();
  #endif
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Transmission_Payload* default_instance_;
};
// -------------------------------------------------------------------

class Transmission_Error : public ::google::protobuf::MessageLite {
 public:
  Transmission_Error();
  virtual ~Transmission_Error();

  Transmission_Error(const Transmission_Error& from);

  inline Transmission_Error& operator=(const Transmission_Error& from) {
    CopyFrom(from);
    return *this;
  }

  static const Transmission_Error& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Transmission_Error* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Transmission_Error* other);

  // implements Message ----------------------------------------------

  Transmission_Error* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Transmission_Error& from);
  void MergeFrom(const Transmission_Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string what = 1;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 1;
  inline const ::std::string& what() const;
  inline void set_what(const ::std::string& value);
  inline void set_what(const char* value);
  inline void set_what(const char* value, size_t size);
  inline ::std::string* mutable_what();
  inline ::std::string* release_what();
  inline void set_allocated_what(::std::string* what);

  // @@protoc_insertion_point(class_scope:xblab.Transmission.Error)
 private:
  inline void set_has_what();
  inline void clear_has_what();

  ::std::string* what_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_xblab_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_xblab_2eproto();
  #endif
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Transmission_Error* default_instance_;
};
// -------------------------------------------------------------------

class Transmission_No_Op : public ::google::protobuf::MessageLite {
 public:
  Transmission_No_Op();
  virtual ~Transmission_No_Op();

  Transmission_No_Op(const Transmission_No_Op& from);

  inline Transmission_No_Op& operator=(const Transmission_No_Op& from) {
    CopyFrom(from);
    return *this;
  }

  static const Transmission_No_Op& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Transmission_No_Op* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Transmission_No_Op* other);

  // implements Message ----------------------------------------------

  Transmission_No_Op* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Transmission_No_Op& from);
  void MergeFrom(const Transmission_No_Op& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string what = 1;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 1;
  inline const ::std::string& what() const;
  inline void set_what(const ::std::string& value);
  inline void set_what(const char* value);
  inline void set_what(const char* value, size_t size);
  inline ::std::string* mutable_what();
  inline ::std::string* release_what();
  inline void set_allocated_what(::std::string* what);

  // @@protoc_insertion_point(class_scope:xblab.Transmission.No_Op)
 private:
  inline void set_has_what();
  inline void clear_has_what();

  ::std::string* what_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_xblab_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_xblab_2eproto();
  #endif
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Transmission_No_Op* default_instance_;
};
// -------------------------------------------------------------------

class Transmission_Data : public ::google::protobuf::MessageLite {
 public:
  Transmission_Data();
  virtual ~Transmission_Data();

  Transmission_Data(const Transmission_Data& from);

  inline Transmission_Data& operator=(const Transmission_Data& from) {
    CopyFrom(from);
    return *this;
  }

  static const Transmission_Data& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Transmission_Data* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Transmission_Data* other);

  // implements Message ----------------------------------------------

  Transmission_Data* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Transmission_Data& from);
  void MergeFrom(const Transmission_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .xblab.Transmission.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::xblab::Transmission_Type type() const;
  inline void set_type(::xblab::Transmission_Type value);

  // required string nonce = 2;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 2;
  inline const ::std::string& nonce() const;
  inline void set_nonce(const ::std::string& value);
  inline void set_nonce(const char* value);
  inline void set_nonce(const char* value, size_t size);
  inline ::std::string* mutable_nonce();
  inline ::std::string* release_nonce();
  inline void set_allocated_nonce(::std::string* nonce);

  // optional string return_nonce = 3;
  inline bool has_return_nonce() const;
  inline void clear_return_nonce();
  static const int kReturnNonceFieldNumber = 3;
  inline const ::std::string& return_nonce() const;
  inline void set_return_nonce(const ::std::string& value);
  inline void set_return_nonce(const char* value);
  inline void set_return_nonce(const char* value, size_t size);
  inline ::std::string* mutable_return_nonce();
  inline ::std::string* release_return_nonce();
  inline void set_allocated_return_nonce(::std::string* return_nonce);

  // optional .xblab.Transmission.Credential credential = 4;
  inline bool has_credential() const;
  inline void clear_credential();
  static const int kCredentialFieldNumber = 4;
  inline const ::xblab::Transmission_Credential& credential() const;
  inline ::xblab::Transmission_Credential* mutable_credential();
  inline ::xblab::Transmission_Credential* release_credential();
  inline void set_allocated_credential(::xblab::Transmission_Credential* credential);

  // optional .xblab.Transmission.Payload payload = 5;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 5;
  inline const ::xblab::Transmission_Payload& payload() const;
  inline ::xblab::Transmission_Payload* mutable_payload();
  inline ::xblab::Transmission_Payload* release_payload();
  inline void set_allocated_payload(::xblab::Transmission_Payload* payload);

  // optional .xblab.Transmission.Error error = 6;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 6;
  inline const ::xblab::Transmission_Error& error() const;
  inline ::xblab::Transmission_Error* mutable_error();
  inline ::xblab::Transmission_Error* release_error();
  inline void set_allocated_error(::xblab::Transmission_Error* error);

  // optional .xblab.Transmission.No_Op no_op = 7;
  inline bool has_no_op() const;
  inline void clear_no_op();
  static const int kNoOpFieldNumber = 7;
  inline const ::xblab::Transmission_No_Op& no_op() const;
  inline ::xblab::Transmission_No_Op* mutable_no_op();
  inline ::xblab::Transmission_No_Op* release_no_op();
  inline void set_allocated_no_op(::xblab::Transmission_No_Op* no_op);

  // @@protoc_insertion_point(class_scope:xblab.Transmission.Data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_return_nonce();
  inline void clear_has_return_nonce();
  inline void set_has_credential();
  inline void clear_has_credential();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_no_op();
  inline void clear_has_no_op();

  ::std::string* nonce_;
  ::std::string* return_nonce_;
  ::xblab::Transmission_Credential* credential_;
  ::xblab::Transmission_Payload* payload_;
  ::xblab::Transmission_Error* error_;
  ::xblab::Transmission_No_Op* no_op_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_xblab_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_xblab_2eproto();
  #endif
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Transmission_Data* default_instance_;
};
// -------------------------------------------------------------------

class Transmission : public ::google::protobuf::MessageLite {
 public:
  Transmission();
  virtual ~Transmission();

  Transmission(const Transmission& from);

  inline Transmission& operator=(const Transmission& from) {
    CopyFrom(from);
    return *this;
  }

  static const Transmission& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Transmission* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Transmission* other);

  // implements Message ----------------------------------------------

  Transmission* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Transmission& from);
  void MergeFrom(const Transmission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Transmission_Credential Credential;
  typedef Transmission_Payload Payload;
  typedef Transmission_Error Error;
  typedef Transmission_No_Op No_Op;
  typedef Transmission_Data Data;

  typedef Transmission_Type Type;
  static const Type CRED = Transmission_Type_CRED;
  static const Type ENTER = Transmission_Type_ENTER;
  static const Type TRANSMIT = Transmission_Type_TRANSMIT;
  static const Type EXIT = Transmission_Type_EXIT;
  static const Type QUIT = Transmission_Type_QUIT;
  static const Type ERROR = Transmission_Type_ERROR;
  static const Type NO_OP = Transmission_Type_NO_OP;
  static const Type READY = Transmission_Type_READY;
  static inline bool Type_IsValid(int value) {
    return Transmission_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Transmission_Type_Type_MIN;
  static const Type Type_MAX =
    Transmission_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Transmission_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string signature = 1;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 1;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // required .xblab.Transmission.Data data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::xblab::Transmission_Data& data() const;
  inline ::xblab::Transmission_Data* mutable_data();
  inline ::xblab::Transmission_Data* release_data();
  inline void set_allocated_data(::xblab::Transmission_Data* data);

  // @@protoc_insertion_point(class_scope:xblab.Transmission)
 private:
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_data();
  inline void clear_has_data();

  ::std::string* signature_;
  ::xblab::Transmission_Data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_xblab_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_xblab_2eproto();
  #endif
  friend void protobuf_AssignDesc_xblab_2eproto();
  friend void protobuf_ShutdownFile_xblab_2eproto();

  void InitAsDefaultInstance();
  static Transmission* default_instance_;
};
// ===================================================================


// ===================================================================

// Broadcast_Session

// required string pub_key = 1;
inline bool Broadcast_Session::has_pub_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broadcast_Session::set_has_pub_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broadcast_Session::clear_has_pub_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broadcast_Session::clear_pub_key() {
  if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
    pub_key_->clear();
  }
  clear_has_pub_key();
}
inline const ::std::string& Broadcast_Session::pub_key() const {
  return *pub_key_;
}
inline void Broadcast_Session::set_pub_key(const ::std::string& value) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(value);
}
inline void Broadcast_Session::set_pub_key(const char* value) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(value);
}
inline void Broadcast_Session::set_pub_key(const char* value, size_t size) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Broadcast_Session::mutable_pub_key() {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  return pub_key_;
}
inline ::std::string* Broadcast_Session::release_pub_key() {
  clear_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pub_key_;
    pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Broadcast_Session::set_allocated_pub_key(::std::string* pub_key) {
  if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
    delete pub_key_;
  }
  if (pub_key) {
    set_has_pub_key();
    pub_key_ = pub_key;
  } else {
    clear_has_pub_key();
    pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes schedule = 2;
inline bool Broadcast_Session::has_schedule() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Broadcast_Session::set_has_schedule() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Broadcast_Session::clear_has_schedule() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Broadcast_Session::clear_schedule() {
  if (schedule_ != &::google::protobuf::internal::kEmptyString) {
    schedule_->clear();
  }
  clear_has_schedule();
}
inline const ::std::string& Broadcast_Session::schedule() const {
  return *schedule_;
}
inline void Broadcast_Session::set_schedule(const ::std::string& value) {
  set_has_schedule();
  if (schedule_ == &::google::protobuf::internal::kEmptyString) {
    schedule_ = new ::std::string;
  }
  schedule_->assign(value);
}
inline void Broadcast_Session::set_schedule(const char* value) {
  set_has_schedule();
  if (schedule_ == &::google::protobuf::internal::kEmptyString) {
    schedule_ = new ::std::string;
  }
  schedule_->assign(value);
}
inline void Broadcast_Session::set_schedule(const void* value, size_t size) {
  set_has_schedule();
  if (schedule_ == &::google::protobuf::internal::kEmptyString) {
    schedule_ = new ::std::string;
  }
  schedule_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Broadcast_Session::mutable_schedule() {
  set_has_schedule();
  if (schedule_ == &::google::protobuf::internal::kEmptyString) {
    schedule_ = new ::std::string;
  }
  return schedule_;
}
inline ::std::string* Broadcast_Session::release_schedule() {
  clear_has_schedule();
  if (schedule_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = schedule_;
    schedule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Broadcast_Session::set_allocated_schedule(::std::string* schedule) {
  if (schedule_ != &::google::protobuf::internal::kEmptyString) {
    delete schedule_;
  }
  if (schedule) {
    set_has_schedule();
    schedule_ = schedule;
  } else {
    clear_has_schedule();
    schedule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 schedule_size = 3;
inline bool Broadcast_Session::has_schedule_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Broadcast_Session::set_has_schedule_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Broadcast_Session::clear_has_schedule_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Broadcast_Session::clear_schedule_size() {
  schedule_size_ = 0u;
  clear_has_schedule_size();
}
inline ::google::protobuf::uint32 Broadcast_Session::schedule_size() const {
  return schedule_size_;
}
inline void Broadcast_Session::set_schedule_size(::google::protobuf::uint32 value) {
  set_has_schedule_size();
  schedule_size_ = value;
}

// -------------------------------------------------------------------

// Broadcast_Payload

// required bool is_important = 1;
inline bool Broadcast_Payload::has_is_important() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broadcast_Payload::set_has_is_important() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broadcast_Payload::clear_has_is_important() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broadcast_Payload::clear_is_important() {
  is_important_ = false;
  clear_has_is_important();
}
inline bool Broadcast_Payload::is_important() const {
  return is_important_;
}
inline void Broadcast_Payload::set_is_important(bool value) {
  set_has_is_important();
  is_important_ = value;
}

// required string content = 2;
inline bool Broadcast_Payload::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Broadcast_Payload::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Broadcast_Payload::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Broadcast_Payload::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Broadcast_Payload::content() const {
  return *content_;
}
inline void Broadcast_Payload::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Broadcast_Payload::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Broadcast_Payload::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Broadcast_Payload::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Broadcast_Payload::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Broadcast_Payload::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed32 modulo = 3;
inline bool Broadcast_Payload::has_modulo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Broadcast_Payload::set_has_modulo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Broadcast_Payload::clear_has_modulo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Broadcast_Payload::clear_modulo() {
  modulo_ = 0u;
  clear_has_modulo();
}
inline ::google::protobuf::uint32 Broadcast_Payload::modulo() const {
  return modulo_;
}
inline void Broadcast_Payload::set_modulo(::google::protobuf::uint32 value) {
  set_has_modulo();
  modulo_ = value;
}

// -------------------------------------------------------------------

// Broadcast_Prologue

// required fixed32 modulo = 1;
inline bool Broadcast_Prologue::has_modulo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broadcast_Prologue::set_has_modulo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broadcast_Prologue::clear_has_modulo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broadcast_Prologue::clear_modulo() {
  modulo_ = 0u;
  clear_has_modulo();
}
inline ::google::protobuf::uint32 Broadcast_Prologue::modulo() const {
  return modulo_;
}
inline void Broadcast_Prologue::set_modulo(::google::protobuf::uint32 value) {
  set_has_modulo();
  modulo_ = value;
}

// -------------------------------------------------------------------

// Broadcast_Error

// required string what = 1;
inline bool Broadcast_Error::has_what() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broadcast_Error::set_has_what() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broadcast_Error::clear_has_what() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broadcast_Error::clear_what() {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    what_->clear();
  }
  clear_has_what();
}
inline const ::std::string& Broadcast_Error::what() const {
  return *what_;
}
inline void Broadcast_Error::set_what(const ::std::string& value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void Broadcast_Error::set_what(const char* value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void Broadcast_Error::set_what(const char* value, size_t size) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Broadcast_Error::mutable_what() {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  return what_;
}
inline ::std::string* Broadcast_Error::release_what() {
  clear_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = what_;
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Broadcast_Error::set_allocated_what(::std::string* what) {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    delete what_;
  }
  if (what) {
    set_has_what();
    what_ = what;
  } else {
    clear_has_what();
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Broadcast_No_Op

// required string what = 1;
inline bool Broadcast_No_Op::has_what() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broadcast_No_Op::set_has_what() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broadcast_No_Op::clear_has_what() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broadcast_No_Op::clear_what() {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    what_->clear();
  }
  clear_has_what();
}
inline const ::std::string& Broadcast_No_Op::what() const {
  return *what_;
}
inline void Broadcast_No_Op::set_what(const ::std::string& value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void Broadcast_No_Op::set_what(const char* value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void Broadcast_No_Op::set_what(const char* value, size_t size) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Broadcast_No_Op::mutable_what() {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  return what_;
}
inline ::std::string* Broadcast_No_Op::release_what() {
  clear_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = what_;
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Broadcast_No_Op::set_allocated_what(::std::string* what) {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    delete what_;
  }
  if (what) {
    set_has_what();
    what_ = what;
  } else {
    clear_has_what();
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Broadcast_Data

// required .xblab.Broadcast.Type type = 1;
inline bool Broadcast_Data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broadcast_Data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broadcast_Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broadcast_Data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::xblab::Broadcast_Type Broadcast_Data::type() const {
  return static_cast< ::xblab::Broadcast_Type >(type_);
}
inline void Broadcast_Data::set_type(::xblab::Broadcast_Type value) {
  assert(::xblab::Broadcast_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string nonce = 2;
inline bool Broadcast_Data::has_nonce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Broadcast_Data::set_has_nonce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Broadcast_Data::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Broadcast_Data::clear_nonce() {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    nonce_->clear();
  }
  clear_has_nonce();
}
inline const ::std::string& Broadcast_Data::nonce() const {
  return *nonce_;
}
inline void Broadcast_Data::set_nonce(const ::std::string& value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
}
inline void Broadcast_Data::set_nonce(const char* value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
}
inline void Broadcast_Data::set_nonce(const char* value, size_t size) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Broadcast_Data::mutable_nonce() {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  return nonce_;
}
inline ::std::string* Broadcast_Data::release_nonce() {
  clear_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nonce_;
    nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Broadcast_Data::set_allocated_nonce(::std::string* nonce) {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete nonce_;
  }
  if (nonce) {
    set_has_nonce();
    nonce_ = nonce;
  } else {
    clear_has_nonce();
    nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string return_nonce = 3;
inline bool Broadcast_Data::has_return_nonce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Broadcast_Data::set_has_return_nonce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Broadcast_Data::clear_has_return_nonce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Broadcast_Data::clear_return_nonce() {
  if (return_nonce_ != &::google::protobuf::internal::kEmptyString) {
    return_nonce_->clear();
  }
  clear_has_return_nonce();
}
inline const ::std::string& Broadcast_Data::return_nonce() const {
  return *return_nonce_;
}
inline void Broadcast_Data::set_return_nonce(const ::std::string& value) {
  set_has_return_nonce();
  if (return_nonce_ == &::google::protobuf::internal::kEmptyString) {
    return_nonce_ = new ::std::string;
  }
  return_nonce_->assign(value);
}
inline void Broadcast_Data::set_return_nonce(const char* value) {
  set_has_return_nonce();
  if (return_nonce_ == &::google::protobuf::internal::kEmptyString) {
    return_nonce_ = new ::std::string;
  }
  return_nonce_->assign(value);
}
inline void Broadcast_Data::set_return_nonce(const char* value, size_t size) {
  set_has_return_nonce();
  if (return_nonce_ == &::google::protobuf::internal::kEmptyString) {
    return_nonce_ = new ::std::string;
  }
  return_nonce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Broadcast_Data::mutable_return_nonce() {
  set_has_return_nonce();
  if (return_nonce_ == &::google::protobuf::internal::kEmptyString) {
    return_nonce_ = new ::std::string;
  }
  return return_nonce_;
}
inline ::std::string* Broadcast_Data::release_return_nonce() {
  clear_has_return_nonce();
  if (return_nonce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = return_nonce_;
    return_nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Broadcast_Data::set_allocated_return_nonce(::std::string* return_nonce) {
  if (return_nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete return_nonce_;
  }
  if (return_nonce) {
    set_has_return_nonce();
    return_nonce_ = return_nonce;
  } else {
    clear_has_return_nonce();
    return_nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .xblab.Broadcast.Session session = 4;
inline bool Broadcast_Data::has_session() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Broadcast_Data::set_has_session() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Broadcast_Data::clear_has_session() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Broadcast_Data::clear_session() {
  if (session_ != NULL) session_->::xblab::Broadcast_Session::Clear();
  clear_has_session();
}
inline const ::xblab::Broadcast_Session& Broadcast_Data::session() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return session_ != NULL ? *session_ : *default_instance().session_;
#else
  return session_ != NULL ? *session_ : *default_instance_->session_;
#endif
}
inline ::xblab::Broadcast_Session* Broadcast_Data::mutable_session() {
  set_has_session();
  if (session_ == NULL) session_ = new ::xblab::Broadcast_Session;
  return session_;
}
inline ::xblab::Broadcast_Session* Broadcast_Data::release_session() {
  clear_has_session();
  ::xblab::Broadcast_Session* temp = session_;
  session_ = NULL;
  return temp;
}
inline void Broadcast_Data::set_allocated_session(::xblab::Broadcast_Session* session) {
  delete session_;
  session_ = session;
  if (session) {
    set_has_session();
  } else {
    clear_has_session();
  }
}

// optional .xblab.Broadcast.Prologue prologue = 5;
inline bool Broadcast_Data::has_prologue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Broadcast_Data::set_has_prologue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Broadcast_Data::clear_has_prologue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Broadcast_Data::clear_prologue() {
  if (prologue_ != NULL) prologue_->::xblab::Broadcast_Prologue::Clear();
  clear_has_prologue();
}
inline const ::xblab::Broadcast_Prologue& Broadcast_Data::prologue() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return prologue_ != NULL ? *prologue_ : *default_instance().prologue_;
#else
  return prologue_ != NULL ? *prologue_ : *default_instance_->prologue_;
#endif
}
inline ::xblab::Broadcast_Prologue* Broadcast_Data::mutable_prologue() {
  set_has_prologue();
  if (prologue_ == NULL) prologue_ = new ::xblab::Broadcast_Prologue;
  return prologue_;
}
inline ::xblab::Broadcast_Prologue* Broadcast_Data::release_prologue() {
  clear_has_prologue();
  ::xblab::Broadcast_Prologue* temp = prologue_;
  prologue_ = NULL;
  return temp;
}
inline void Broadcast_Data::set_allocated_prologue(::xblab::Broadcast_Prologue* prologue) {
  delete prologue_;
  prologue_ = prologue;
  if (prologue) {
    set_has_prologue();
  } else {
    clear_has_prologue();
  }
}

// optional .xblab.Broadcast.Payload payload = 6;
inline bool Broadcast_Data::has_payload() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Broadcast_Data::set_has_payload() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Broadcast_Data::clear_has_payload() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Broadcast_Data::clear_payload() {
  if (payload_ != NULL) payload_->::xblab::Broadcast_Payload::Clear();
  clear_has_payload();
}
inline const ::xblab::Broadcast_Payload& Broadcast_Data::payload() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return payload_ != NULL ? *payload_ : *default_instance().payload_;
#else
  return payload_ != NULL ? *payload_ : *default_instance_->payload_;
#endif
}
inline ::xblab::Broadcast_Payload* Broadcast_Data::mutable_payload() {
  set_has_payload();
  if (payload_ == NULL) payload_ = new ::xblab::Broadcast_Payload;
  return payload_;
}
inline ::xblab::Broadcast_Payload* Broadcast_Data::release_payload() {
  clear_has_payload();
  ::xblab::Broadcast_Payload* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline void Broadcast_Data::set_allocated_payload(::xblab::Broadcast_Payload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
}

// optional .xblab.Broadcast.Error error = 7;
inline bool Broadcast_Data::has_error() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Broadcast_Data::set_has_error() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Broadcast_Data::clear_has_error() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Broadcast_Data::clear_error() {
  if (error_ != NULL) error_->::xblab::Broadcast_Error::Clear();
  clear_has_error();
}
inline const ::xblab::Broadcast_Error& Broadcast_Data::error() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return error_ != NULL ? *error_ : *default_instance().error_;
#else
  return error_ != NULL ? *error_ : *default_instance_->error_;
#endif
}
inline ::xblab::Broadcast_Error* Broadcast_Data::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::xblab::Broadcast_Error;
  return error_;
}
inline ::xblab::Broadcast_Error* Broadcast_Data::release_error() {
  clear_has_error();
  ::xblab::Broadcast_Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void Broadcast_Data::set_allocated_error(::xblab::Broadcast_Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
}

// optional .xblab.Broadcast.No_Op no_op = 8;
inline bool Broadcast_Data::has_no_op() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Broadcast_Data::set_has_no_op() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Broadcast_Data::clear_has_no_op() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Broadcast_Data::clear_no_op() {
  if (no_op_ != NULL) no_op_->::xblab::Broadcast_No_Op::Clear();
  clear_has_no_op();
}
inline const ::xblab::Broadcast_No_Op& Broadcast_Data::no_op() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return no_op_ != NULL ? *no_op_ : *default_instance().no_op_;
#else
  return no_op_ != NULL ? *no_op_ : *default_instance_->no_op_;
#endif
}
inline ::xblab::Broadcast_No_Op* Broadcast_Data::mutable_no_op() {
  set_has_no_op();
  if (no_op_ == NULL) no_op_ = new ::xblab::Broadcast_No_Op;
  return no_op_;
}
inline ::xblab::Broadcast_No_Op* Broadcast_Data::release_no_op() {
  clear_has_no_op();
  ::xblab::Broadcast_No_Op* temp = no_op_;
  no_op_ = NULL;
  return temp;
}
inline void Broadcast_Data::set_allocated_no_op(::xblab::Broadcast_No_Op* no_op) {
  delete no_op_;
  no_op_ = no_op;
  if (no_op) {
    set_has_no_op();
  } else {
    clear_has_no_op();
  }
}

// -------------------------------------------------------------------

// Broadcast

// required string signature = 1;
inline bool Broadcast::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broadcast::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broadcast::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broadcast::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& Broadcast::signature() const {
  return *signature_;
}
inline void Broadcast::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Broadcast::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Broadcast::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Broadcast::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* Broadcast::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Broadcast::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .xblab.Broadcast.Data data = 2;
inline bool Broadcast::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Broadcast::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Broadcast::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Broadcast::clear_data() {
  if (data_ != NULL) data_->::xblab::Broadcast_Data::Clear();
  clear_has_data();
}
inline const ::xblab::Broadcast_Data& Broadcast::data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return data_ != NULL ? *data_ : *default_instance().data_;
#else
  return data_ != NULL ? *data_ : *default_instance_->data_;
#endif
}
inline ::xblab::Broadcast_Data* Broadcast::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::xblab::Broadcast_Data;
  return data_;
}
inline ::xblab::Broadcast_Data* Broadcast::release_data() {
  clear_has_data();
  ::xblab::Broadcast_Data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void Broadcast::set_allocated_data(::xblab::Broadcast_Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// Transmission_Credential

// required string username = 1;
inline bool Transmission_Credential::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transmission_Credential::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transmission_Credential::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transmission_Credential::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Transmission_Credential::username() const {
  return *username_;
}
inline void Transmission_Credential::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Transmission_Credential::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Transmission_Credential::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Credential::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* Transmission_Credential::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Credential::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool Transmission_Credential::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transmission_Credential::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transmission_Credential::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transmission_Credential::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Transmission_Credential::password() const {
  return *password_;
}
inline void Transmission_Credential::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Transmission_Credential::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Transmission_Credential::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Credential::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Transmission_Credential::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Credential::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string group = 3;
inline bool Transmission_Credential::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transmission_Credential::set_has_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transmission_Credential::clear_has_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transmission_Credential::clear_group() {
  if (group_ != &::google::protobuf::internal::kEmptyString) {
    group_->clear();
  }
  clear_has_group();
}
inline const ::std::string& Transmission_Credential::group() const {
  return *group_;
}
inline void Transmission_Credential::set_group(const ::std::string& value) {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  group_->assign(value);
}
inline void Transmission_Credential::set_group(const char* value) {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  group_->assign(value);
}
inline void Transmission_Credential::set_group(const char* value, size_t size) {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  group_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Credential::mutable_group() {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  return group_;
}
inline ::std::string* Transmission_Credential::release_group() {
  clear_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_;
    group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Credential::set_allocated_group(::std::string* group) {
  if (group_ != &::google::protobuf::internal::kEmptyString) {
    delete group_;
  }
  if (group) {
    set_has_group();
    group_ = group;
  } else {
    clear_has_group();
    group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pub_key = 4;
inline bool Transmission_Credential::has_pub_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transmission_Credential::set_has_pub_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transmission_Credential::clear_has_pub_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transmission_Credential::clear_pub_key() {
  if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
    pub_key_->clear();
  }
  clear_has_pub_key();
}
inline const ::std::string& Transmission_Credential::pub_key() const {
  return *pub_key_;
}
inline void Transmission_Credential::set_pub_key(const ::std::string& value) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(value);
}
inline void Transmission_Credential::set_pub_key(const char* value) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(value);
}
inline void Transmission_Credential::set_pub_key(const char* value, size_t size) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Credential::mutable_pub_key() {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  return pub_key_;
}
inline ::std::string* Transmission_Credential::release_pub_key() {
  clear_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pub_key_;
    pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Credential::set_allocated_pub_key(::std::string* pub_key) {
  if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
    delete pub_key_;
  }
  if (pub_key) {
    set_has_pub_key();
    pub_key_ = pub_key;
  } else {
    clear_has_pub_key();
    pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Transmission_Payload

// required bool is_important = 1;
inline bool Transmission_Payload::has_is_important() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transmission_Payload::set_has_is_important() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transmission_Payload::clear_has_is_important() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transmission_Payload::clear_is_important() {
  is_important_ = false;
  clear_has_is_important();
}
inline bool Transmission_Payload::is_important() const {
  return is_important_;
}
inline void Transmission_Payload::set_is_important(bool value) {
  set_has_is_important();
  is_important_ = value;
}

// required string content = 2;
inline bool Transmission_Payload::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transmission_Payload::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transmission_Payload::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transmission_Payload::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Transmission_Payload::content() const {
  return *content_;
}
inline void Transmission_Payload::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Transmission_Payload::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Transmission_Payload::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Payload::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Transmission_Payload::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Payload::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Transmission_Error

// required string what = 1;
inline bool Transmission_Error::has_what() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transmission_Error::set_has_what() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transmission_Error::clear_has_what() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transmission_Error::clear_what() {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    what_->clear();
  }
  clear_has_what();
}
inline const ::std::string& Transmission_Error::what() const {
  return *what_;
}
inline void Transmission_Error::set_what(const ::std::string& value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void Transmission_Error::set_what(const char* value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void Transmission_Error::set_what(const char* value, size_t size) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Error::mutable_what() {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  return what_;
}
inline ::std::string* Transmission_Error::release_what() {
  clear_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = what_;
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Error::set_allocated_what(::std::string* what) {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    delete what_;
  }
  if (what) {
    set_has_what();
    what_ = what;
  } else {
    clear_has_what();
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Transmission_No_Op

// required string what = 1;
inline bool Transmission_No_Op::has_what() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transmission_No_Op::set_has_what() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transmission_No_Op::clear_has_what() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transmission_No_Op::clear_what() {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    what_->clear();
  }
  clear_has_what();
}
inline const ::std::string& Transmission_No_Op::what() const {
  return *what_;
}
inline void Transmission_No_Op::set_what(const ::std::string& value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void Transmission_No_Op::set_what(const char* value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void Transmission_No_Op::set_what(const char* value, size_t size) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_No_Op::mutable_what() {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  return what_;
}
inline ::std::string* Transmission_No_Op::release_what() {
  clear_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = what_;
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_No_Op::set_allocated_what(::std::string* what) {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    delete what_;
  }
  if (what) {
    set_has_what();
    what_ = what;
  } else {
    clear_has_what();
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Transmission_Data

// required .xblab.Transmission.Type type = 1;
inline bool Transmission_Data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transmission_Data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transmission_Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transmission_Data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::xblab::Transmission_Type Transmission_Data::type() const {
  return static_cast< ::xblab::Transmission_Type >(type_);
}
inline void Transmission_Data::set_type(::xblab::Transmission_Type value) {
  assert(::xblab::Transmission_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string nonce = 2;
inline bool Transmission_Data::has_nonce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transmission_Data::set_has_nonce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transmission_Data::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transmission_Data::clear_nonce() {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    nonce_->clear();
  }
  clear_has_nonce();
}
inline const ::std::string& Transmission_Data::nonce() const {
  return *nonce_;
}
inline void Transmission_Data::set_nonce(const ::std::string& value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
}
inline void Transmission_Data::set_nonce(const char* value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
}
inline void Transmission_Data::set_nonce(const char* value, size_t size) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Data::mutable_nonce() {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  return nonce_;
}
inline ::std::string* Transmission_Data::release_nonce() {
  clear_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nonce_;
    nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Data::set_allocated_nonce(::std::string* nonce) {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete nonce_;
  }
  if (nonce) {
    set_has_nonce();
    nonce_ = nonce;
  } else {
    clear_has_nonce();
    nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string return_nonce = 3;
inline bool Transmission_Data::has_return_nonce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transmission_Data::set_has_return_nonce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transmission_Data::clear_has_return_nonce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transmission_Data::clear_return_nonce() {
  if (return_nonce_ != &::google::protobuf::internal::kEmptyString) {
    return_nonce_->clear();
  }
  clear_has_return_nonce();
}
inline const ::std::string& Transmission_Data::return_nonce() const {
  return *return_nonce_;
}
inline void Transmission_Data::set_return_nonce(const ::std::string& value) {
  set_has_return_nonce();
  if (return_nonce_ == &::google::protobuf::internal::kEmptyString) {
    return_nonce_ = new ::std::string;
  }
  return_nonce_->assign(value);
}
inline void Transmission_Data::set_return_nonce(const char* value) {
  set_has_return_nonce();
  if (return_nonce_ == &::google::protobuf::internal::kEmptyString) {
    return_nonce_ = new ::std::string;
  }
  return_nonce_->assign(value);
}
inline void Transmission_Data::set_return_nonce(const char* value, size_t size) {
  set_has_return_nonce();
  if (return_nonce_ == &::google::protobuf::internal::kEmptyString) {
    return_nonce_ = new ::std::string;
  }
  return_nonce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission_Data::mutable_return_nonce() {
  set_has_return_nonce();
  if (return_nonce_ == &::google::protobuf::internal::kEmptyString) {
    return_nonce_ = new ::std::string;
  }
  return return_nonce_;
}
inline ::std::string* Transmission_Data::release_return_nonce() {
  clear_has_return_nonce();
  if (return_nonce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = return_nonce_;
    return_nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission_Data::set_allocated_return_nonce(::std::string* return_nonce) {
  if (return_nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete return_nonce_;
  }
  if (return_nonce) {
    set_has_return_nonce();
    return_nonce_ = return_nonce;
  } else {
    clear_has_return_nonce();
    return_nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .xblab.Transmission.Credential credential = 4;
inline bool Transmission_Data::has_credential() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transmission_Data::set_has_credential() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transmission_Data::clear_has_credential() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transmission_Data::clear_credential() {
  if (credential_ != NULL) credential_->::xblab::Transmission_Credential::Clear();
  clear_has_credential();
}
inline const ::xblab::Transmission_Credential& Transmission_Data::credential() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return credential_ != NULL ? *credential_ : *default_instance().credential_;
#else
  return credential_ != NULL ? *credential_ : *default_instance_->credential_;
#endif
}
inline ::xblab::Transmission_Credential* Transmission_Data::mutable_credential() {
  set_has_credential();
  if (credential_ == NULL) credential_ = new ::xblab::Transmission_Credential;
  return credential_;
}
inline ::xblab::Transmission_Credential* Transmission_Data::release_credential() {
  clear_has_credential();
  ::xblab::Transmission_Credential* temp = credential_;
  credential_ = NULL;
  return temp;
}
inline void Transmission_Data::set_allocated_credential(::xblab::Transmission_Credential* credential) {
  delete credential_;
  credential_ = credential;
  if (credential) {
    set_has_credential();
  } else {
    clear_has_credential();
  }
}

// optional .xblab.Transmission.Payload payload = 5;
inline bool Transmission_Data::has_payload() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transmission_Data::set_has_payload() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transmission_Data::clear_has_payload() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transmission_Data::clear_payload() {
  if (payload_ != NULL) payload_->::xblab::Transmission_Payload::Clear();
  clear_has_payload();
}
inline const ::xblab::Transmission_Payload& Transmission_Data::payload() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return payload_ != NULL ? *payload_ : *default_instance().payload_;
#else
  return payload_ != NULL ? *payload_ : *default_instance_->payload_;
#endif
}
inline ::xblab::Transmission_Payload* Transmission_Data::mutable_payload() {
  set_has_payload();
  if (payload_ == NULL) payload_ = new ::xblab::Transmission_Payload;
  return payload_;
}
inline ::xblab::Transmission_Payload* Transmission_Data::release_payload() {
  clear_has_payload();
  ::xblab::Transmission_Payload* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline void Transmission_Data::set_allocated_payload(::xblab::Transmission_Payload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
}

// optional .xblab.Transmission.Error error = 6;
inline bool Transmission_Data::has_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transmission_Data::set_has_error() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transmission_Data::clear_has_error() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transmission_Data::clear_error() {
  if (error_ != NULL) error_->::xblab::Transmission_Error::Clear();
  clear_has_error();
}
inline const ::xblab::Transmission_Error& Transmission_Data::error() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return error_ != NULL ? *error_ : *default_instance().error_;
#else
  return error_ != NULL ? *error_ : *default_instance_->error_;
#endif
}
inline ::xblab::Transmission_Error* Transmission_Data::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::xblab::Transmission_Error;
  return error_;
}
inline ::xblab::Transmission_Error* Transmission_Data::release_error() {
  clear_has_error();
  ::xblab::Transmission_Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void Transmission_Data::set_allocated_error(::xblab::Transmission_Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
}

// optional .xblab.Transmission.No_Op no_op = 7;
inline bool Transmission_Data::has_no_op() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transmission_Data::set_has_no_op() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transmission_Data::clear_has_no_op() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transmission_Data::clear_no_op() {
  if (no_op_ != NULL) no_op_->::xblab::Transmission_No_Op::Clear();
  clear_has_no_op();
}
inline const ::xblab::Transmission_No_Op& Transmission_Data::no_op() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return no_op_ != NULL ? *no_op_ : *default_instance().no_op_;
#else
  return no_op_ != NULL ? *no_op_ : *default_instance_->no_op_;
#endif
}
inline ::xblab::Transmission_No_Op* Transmission_Data::mutable_no_op() {
  set_has_no_op();
  if (no_op_ == NULL) no_op_ = new ::xblab::Transmission_No_Op;
  return no_op_;
}
inline ::xblab::Transmission_No_Op* Transmission_Data::release_no_op() {
  clear_has_no_op();
  ::xblab::Transmission_No_Op* temp = no_op_;
  no_op_ = NULL;
  return temp;
}
inline void Transmission_Data::set_allocated_no_op(::xblab::Transmission_No_Op* no_op) {
  delete no_op_;
  no_op_ = no_op;
  if (no_op) {
    set_has_no_op();
  } else {
    clear_has_no_op();
  }
}

// -------------------------------------------------------------------

// Transmission

// required string signature = 1;
inline bool Transmission::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transmission::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transmission::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transmission::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& Transmission::signature() const {
  return *signature_;
}
inline void Transmission::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Transmission::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Transmission::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transmission::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* Transmission::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transmission::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .xblab.Transmission.Data data = 2;
inline bool Transmission::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transmission::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transmission::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transmission::clear_data() {
  if (data_ != NULL) data_->::xblab::Transmission_Data::Clear();
  clear_has_data();
}
inline const ::xblab::Transmission_Data& Transmission::data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return data_ != NULL ? *data_ : *default_instance().data_;
#else
  return data_ != NULL ? *data_ : *default_instance_->data_;
#endif
}
inline ::xblab::Transmission_Data* Transmission::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::xblab::Transmission_Data;
  return data_;
}
inline ::xblab::Transmission_Data* Transmission::release_data() {
  clear_has_data();
  ::xblab::Transmission_Data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void Transmission::set_allocated_data(::xblab::Transmission_Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xblab

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_xblab_2eproto__INCLUDED
