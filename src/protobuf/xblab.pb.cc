// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xblab.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xblab.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xblab {

namespace {

const ::google::protobuf::Descriptor* Broadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Broadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* Broadcast_Session_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Broadcast_Session_reflection_ = NULL;
const ::google::protobuf::Descriptor* Broadcast_Payload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Broadcast_Payload_reflection_ = NULL;
const ::google::protobuf::Descriptor* Broadcast_Prologue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Broadcast_Prologue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Broadcast_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Broadcast_Data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Broadcast_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Transmission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transmission_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transmission_Credential_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transmission_Credential_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transmission_Payload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transmission_Payload_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transmission_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transmission_Data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Transmission_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_xblab_2eproto() {
  protobuf_AddDesc_xblab_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "xblab.proto");
  GOOGLE_CHECK(file != NULL);
  Broadcast_descriptor_ = file->message_type(0);
  static const int Broadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, data_),
  };
  Broadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Broadcast_descriptor_,
      Broadcast::default_instance_,
      Broadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Broadcast));
  Broadcast_Session_descriptor_ = Broadcast_descriptor_->nested_type(0);
  static const int Broadcast_Session_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Session, pub_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Session, seed_),
  };
  Broadcast_Session_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Broadcast_Session_descriptor_,
      Broadcast_Session::default_instance_,
      Broadcast_Session_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Session, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Session, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Broadcast_Session));
  Broadcast_Payload_descriptor_ = Broadcast_descriptor_->nested_type(1);
  static const int Broadcast_Payload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Payload, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Payload, modulo_),
  };
  Broadcast_Payload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Broadcast_Payload_descriptor_,
      Broadcast_Payload::default_instance_,
      Broadcast_Payload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Payload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Payload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Broadcast_Payload));
  Broadcast_Prologue_descriptor_ = Broadcast_descriptor_->nested_type(2);
  static const int Broadcast_Prologue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Prologue, modulo_),
  };
  Broadcast_Prologue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Broadcast_Prologue_descriptor_,
      Broadcast_Prologue::default_instance_,
      Broadcast_Prologue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Prologue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Prologue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Broadcast_Prologue));
  Broadcast_Data_descriptor_ = Broadcast_descriptor_->nested_type(3);
  static const int Broadcast_Data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Data, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Data, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Data, prologue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Data, payload_),
  };
  Broadcast_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Broadcast_Data_descriptor_,
      Broadcast_Data::default_instance_,
      Broadcast_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Broadcast_Data));
  Broadcast_Type_descriptor_ = Broadcast_descriptor_->enum_type(0);
  Transmission_descriptor_ = file->message_type(1);
  static const int Transmission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission, data_),
  };
  Transmission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transmission_descriptor_,
      Transmission::default_instance_,
      Transmission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transmission));
  Transmission_Credential_descriptor_ = Transmission_descriptor_->nested_type(0);
  static const int Transmission_Credential_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Credential, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Credential, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Credential, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Credential, pub_key_),
  };
  Transmission_Credential_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transmission_Credential_descriptor_,
      Transmission_Credential::default_instance_,
      Transmission_Credential_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Credential, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Credential, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transmission_Credential));
  Transmission_Payload_descriptor_ = Transmission_descriptor_->nested_type(1);
  static const int Transmission_Payload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Payload, intent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Payload, content_),
  };
  Transmission_Payload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transmission_Payload_descriptor_,
      Transmission_Payload::default_instance_,
      Transmission_Payload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Payload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Payload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transmission_Payload));
  Transmission_Data_descriptor_ = Transmission_descriptor_->nested_type(2);
  static const int Transmission_Data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Data, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Data, credential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Data, payload_),
  };
  Transmission_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transmission_Data_descriptor_,
      Transmission_Data::default_instance_,
      Transmission_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transmission_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transmission_Data));
  Transmission_Type_descriptor_ = Transmission_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_xblab_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Broadcast_descriptor_, &Broadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Broadcast_Session_descriptor_, &Broadcast_Session::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Broadcast_Payload_descriptor_, &Broadcast_Payload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Broadcast_Prologue_descriptor_, &Broadcast_Prologue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Broadcast_Data_descriptor_, &Broadcast_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transmission_descriptor_, &Transmission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transmission_Credential_descriptor_, &Transmission_Credential::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transmission_Payload_descriptor_, &Transmission_Payload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transmission_Data_descriptor_, &Transmission_Data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_xblab_2eproto() {
  delete Broadcast::default_instance_;
  delete Broadcast_reflection_;
  delete Broadcast_Session::default_instance_;
  delete Broadcast_Session_reflection_;
  delete Broadcast_Payload::default_instance_;
  delete Broadcast_Payload_reflection_;
  delete Broadcast_Prologue::default_instance_;
  delete Broadcast_Prologue_reflection_;
  delete Broadcast_Data::default_instance_;
  delete Broadcast_Data_reflection_;
  delete Transmission::default_instance_;
  delete Transmission_reflection_;
  delete Transmission_Credential::default_instance_;
  delete Transmission_Credential_reflection_;
  delete Transmission_Payload::default_instance_;
  delete Transmission_Payload_reflection_;
  delete Transmission_Data::default_instance_;
  delete Transmission_Data_reflection_;
}

void protobuf_AddDesc_xblab_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013xblab.proto\022\005xblab\"\335\003\n\tBroadcast\022\021\n\tsi"
    "gnature\030\001 \002(\t\022#\n\004data\030\002 \002(\0132\025.xblab.Broa"
    "dcast.Data\032(\n\007Session\022\017\n\007pub_key\030\001 \002(\t\022\014"
    "\n\004seed\030\002 \002(\007\032*\n\007Payload\022\017\n\007content\030\001 \002(\t"
    "\022\016\n\006modulo\030\002 \002(\007\032\032\n\010Prologue\022\016\n\006modulo\030\001"
    " \002(\007\032\275\001\n\004Data\022#\n\004type\030\001 \002(\0162\025.xblab.Broa"
    "dcast.Type\022\r\n\005nonce\030\002 \002(\t\022)\n\007session\030\003 \001"
    "(\0132\030.xblab.Broadcast.Session\022+\n\010prologue"
    "\030\004 \001(\0132\031.xblab.Broadcast.Prologue\022)\n\007pay"
    "load\030\005 \001(\0132\030.xblab.Broadcast.Payload\"f\n\004"
    "Type\022\014\n\010NEEDCRED\020\000\022\r\n\tGROUPLIST\020\001\022\016\n\nGRO"
    "UPENTRY\020\002\022\t\n\005BEGIN\020\003\022\r\n\tBROADCAST\020\004\022\r\n\tG"
    "ROUPEXIT\020\005\022\010\n\004QUIT\020\006\"\250\003\n\014Transmission\022\021\n"
    "\tsignature\030\001 \002(\t\022&\n\004data\030\002 \002(\0132\030.xblab.T"
    "ransmission.Data\032P\n\nCredential\022\020\n\010userna"
    "me\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\022\r\n\005group\030\003 \002("
    "\t\022\017\n\007pub_key\030\004 \002(\t\032*\n\007Payload\022\016\n\006intent\030"
    "\001 \002(\010\022\017\n\007content\030\002 \002(\t\032\237\001\n\004Data\022&\n\004type\030"
    "\001 \002(\0162\030.xblab.Transmission.Type\022\r\n\005nonce"
    "\030\002 \002(\t\0222\n\ncredential\030\003 \001(\0132\036.xblab.Trans"
    "mission.Credential\022,\n\007payload\030\004 \001(\0132\033.xb"
    "lab.Transmission.Payload\"=\n\004Type\022\010\n\004CRED"
    "\020\000\022\t\n\005ENTER\020\001\022\014\n\010TRANSMIT\020\002\022\010\n\004EXIT\020\003\022\010\n"
    "\004QUIT\020\004", 927);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xblab.proto", &protobuf_RegisterTypes);
  Broadcast::default_instance_ = new Broadcast();
  Broadcast_Session::default_instance_ = new Broadcast_Session();
  Broadcast_Payload::default_instance_ = new Broadcast_Payload();
  Broadcast_Prologue::default_instance_ = new Broadcast_Prologue();
  Broadcast_Data::default_instance_ = new Broadcast_Data();
  Transmission::default_instance_ = new Transmission();
  Transmission_Credential::default_instance_ = new Transmission_Credential();
  Transmission_Payload::default_instance_ = new Transmission_Payload();
  Transmission_Data::default_instance_ = new Transmission_Data();
  Broadcast::default_instance_->InitAsDefaultInstance();
  Broadcast_Session::default_instance_->InitAsDefaultInstance();
  Broadcast_Payload::default_instance_->InitAsDefaultInstance();
  Broadcast_Prologue::default_instance_->InitAsDefaultInstance();
  Broadcast_Data::default_instance_->InitAsDefaultInstance();
  Transmission::default_instance_->InitAsDefaultInstance();
  Transmission_Credential::default_instance_->InitAsDefaultInstance();
  Transmission_Payload::default_instance_->InitAsDefaultInstance();
  Transmission_Data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_xblab_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_xblab_2eproto {
  StaticDescriptorInitializer_xblab_2eproto() {
    protobuf_AddDesc_xblab_2eproto();
  }
} static_descriptor_initializer_xblab_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Broadcast_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Broadcast_Type_descriptor_;
}
bool Broadcast_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Broadcast_Type Broadcast::NEEDCRED;
const Broadcast_Type Broadcast::GROUPLIST;
const Broadcast_Type Broadcast::GROUPENTRY;
const Broadcast_Type Broadcast::BEGIN;
const Broadcast_Type Broadcast::BROADCAST;
const Broadcast_Type Broadcast::GROUPEXIT;
const Broadcast_Type Broadcast::QUIT;
const Broadcast_Type Broadcast::Type_MIN;
const Broadcast_Type Broadcast::Type_MAX;
const int Broadcast::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Broadcast_Session::kPubKeyFieldNumber;
const int Broadcast_Session::kSeedFieldNumber;
#endif  // !_MSC_VER

Broadcast_Session::Broadcast_Session()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Broadcast_Session::InitAsDefaultInstance() {
}

Broadcast_Session::Broadcast_Session(const Broadcast_Session& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Broadcast_Session::SharedCtor() {
  _cached_size_ = 0;
  pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Broadcast_Session::~Broadcast_Session() {
  SharedDtor();
}

void Broadcast_Session::SharedDtor() {
  if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
    delete pub_key_;
  }
  if (this != default_instance_) {
  }
}

void Broadcast_Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Broadcast_Session::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Broadcast_Session_descriptor_;
}

const Broadcast_Session& Broadcast_Session::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xblab_2eproto();
  return *default_instance_;
}

Broadcast_Session* Broadcast_Session::default_instance_ = NULL;

Broadcast_Session* Broadcast_Session::New() const {
  return new Broadcast_Session;
}

void Broadcast_Session::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pub_key()) {
      if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
        pub_key_->clear();
      }
    }
    seed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Broadcast_Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pub_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pub_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pub_key().data(), this->pub_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_seed;
        break;
      }

      // required fixed32 seed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Broadcast_Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string pub_key = 1;
  if (has_pub_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pub_key().data(), this->pub_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pub_key(), output);
  }

  // required fixed32 seed = 2;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->seed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Broadcast_Session::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string pub_key = 1;
  if (has_pub_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pub_key().data(), this->pub_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pub_key(), target);
  }

  // required fixed32 seed = 2;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->seed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Broadcast_Session::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pub_key = 1;
    if (has_pub_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pub_key());
    }

    // required fixed32 seed = 2;
    if (has_seed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Broadcast_Session::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Broadcast_Session* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Broadcast_Session*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Broadcast_Session::MergeFrom(const Broadcast_Session& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pub_key()) {
      set_pub_key(from.pub_key());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Broadcast_Session::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Broadcast_Session::CopyFrom(const Broadcast_Session& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Broadcast_Session::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Broadcast_Session::Swap(Broadcast_Session* other) {
  if (other != this) {
    std::swap(pub_key_, other->pub_key_);
    std::swap(seed_, other->seed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Broadcast_Session::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Broadcast_Session_descriptor_;
  metadata.reflection = Broadcast_Session_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Broadcast_Payload::kContentFieldNumber;
const int Broadcast_Payload::kModuloFieldNumber;
#endif  // !_MSC_VER

Broadcast_Payload::Broadcast_Payload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Broadcast_Payload::InitAsDefaultInstance() {
}

Broadcast_Payload::Broadcast_Payload(const Broadcast_Payload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Broadcast_Payload::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modulo_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Broadcast_Payload::~Broadcast_Payload() {
  SharedDtor();
}

void Broadcast_Payload::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Broadcast_Payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Broadcast_Payload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Broadcast_Payload_descriptor_;
}

const Broadcast_Payload& Broadcast_Payload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xblab_2eproto();
  return *default_instance_;
}

Broadcast_Payload* Broadcast_Payload::default_instance_ = NULL;

Broadcast_Payload* Broadcast_Payload::New() const {
  return new Broadcast_Payload;
}

void Broadcast_Payload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    modulo_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Broadcast_Payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_modulo;
        break;
      }

      // required fixed32 modulo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_modulo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &modulo_)));
          set_has_modulo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Broadcast_Payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // required fixed32 modulo = 2;
  if (has_modulo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->modulo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Broadcast_Payload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // required fixed32 modulo = 2;
  if (has_modulo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->modulo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Broadcast_Payload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required fixed32 modulo = 2;
    if (has_modulo()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Broadcast_Payload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Broadcast_Payload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Broadcast_Payload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Broadcast_Payload::MergeFrom(const Broadcast_Payload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_modulo()) {
      set_modulo(from.modulo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Broadcast_Payload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Broadcast_Payload::CopyFrom(const Broadcast_Payload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Broadcast_Payload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Broadcast_Payload::Swap(Broadcast_Payload* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(modulo_, other->modulo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Broadcast_Payload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Broadcast_Payload_descriptor_;
  metadata.reflection = Broadcast_Payload_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Broadcast_Prologue::kModuloFieldNumber;
#endif  // !_MSC_VER

Broadcast_Prologue::Broadcast_Prologue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Broadcast_Prologue::InitAsDefaultInstance() {
}

Broadcast_Prologue::Broadcast_Prologue(const Broadcast_Prologue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Broadcast_Prologue::SharedCtor() {
  _cached_size_ = 0;
  modulo_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Broadcast_Prologue::~Broadcast_Prologue() {
  SharedDtor();
}

void Broadcast_Prologue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Broadcast_Prologue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Broadcast_Prologue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Broadcast_Prologue_descriptor_;
}

const Broadcast_Prologue& Broadcast_Prologue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xblab_2eproto();
  return *default_instance_;
}

Broadcast_Prologue* Broadcast_Prologue::default_instance_ = NULL;

Broadcast_Prologue* Broadcast_Prologue::New() const {
  return new Broadcast_Prologue;
}

void Broadcast_Prologue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modulo_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Broadcast_Prologue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 modulo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &modulo_)));
          set_has_modulo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Broadcast_Prologue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 modulo = 1;
  if (has_modulo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->modulo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Broadcast_Prologue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 modulo = 1;
  if (has_modulo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->modulo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Broadcast_Prologue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 modulo = 1;
    if (has_modulo()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Broadcast_Prologue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Broadcast_Prologue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Broadcast_Prologue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Broadcast_Prologue::MergeFrom(const Broadcast_Prologue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modulo()) {
      set_modulo(from.modulo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Broadcast_Prologue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Broadcast_Prologue::CopyFrom(const Broadcast_Prologue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Broadcast_Prologue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Broadcast_Prologue::Swap(Broadcast_Prologue* other) {
  if (other != this) {
    std::swap(modulo_, other->modulo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Broadcast_Prologue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Broadcast_Prologue_descriptor_;
  metadata.reflection = Broadcast_Prologue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Broadcast_Data::kTypeFieldNumber;
const int Broadcast_Data::kNonceFieldNumber;
const int Broadcast_Data::kSessionFieldNumber;
const int Broadcast_Data::kPrologueFieldNumber;
const int Broadcast_Data::kPayloadFieldNumber;
#endif  // !_MSC_VER

Broadcast_Data::Broadcast_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Broadcast_Data::InitAsDefaultInstance() {
  session_ = const_cast< ::xblab::Broadcast_Session*>(&::xblab::Broadcast_Session::default_instance());
  prologue_ = const_cast< ::xblab::Broadcast_Prologue*>(&::xblab::Broadcast_Prologue::default_instance());
  payload_ = const_cast< ::xblab::Broadcast_Payload*>(&::xblab::Broadcast_Payload::default_instance());
}

Broadcast_Data::Broadcast_Data(const Broadcast_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Broadcast_Data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_ = NULL;
  prologue_ = NULL;
  payload_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Broadcast_Data::~Broadcast_Data() {
  SharedDtor();
}

void Broadcast_Data::SharedDtor() {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete nonce_;
  }
  if (this != default_instance_) {
    delete session_;
    delete prologue_;
    delete payload_;
  }
}

void Broadcast_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Broadcast_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Broadcast_Data_descriptor_;
}

const Broadcast_Data& Broadcast_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xblab_2eproto();
  return *default_instance_;
}

Broadcast_Data* Broadcast_Data::default_instance_ = NULL;

Broadcast_Data* Broadcast_Data::New() const {
  return new Broadcast_Data;
}

void Broadcast_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_nonce()) {
      if (nonce_ != &::google::protobuf::internal::kEmptyString) {
        nonce_->clear();
      }
    }
    if (has_session()) {
      if (session_ != NULL) session_->::xblab::Broadcast_Session::Clear();
    }
    if (has_prologue()) {
      if (prologue_ != NULL) prologue_->::xblab::Broadcast_Prologue::Clear();
    }
    if (has_payload()) {
      if (payload_ != NULL) payload_->::xblab::Broadcast_Payload::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Broadcast_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .xblab.Broadcast.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::xblab::Broadcast_Type_IsValid(value)) {
            set_type(static_cast< ::xblab::Broadcast_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nonce;
        break;
      }

      // required string nonce = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nonce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nonce().data(), this->nonce().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_session;
        break;
      }

      // optional .xblab.Broadcast.Session session = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prologue;
        break;
      }

      // optional .xblab.Broadcast.Prologue prologue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prologue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prologue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_payload;
        break;
      }

      // optional .xblab.Broadcast.Payload payload = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Broadcast_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .xblab.Broadcast.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string nonce = 2;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nonce().data(), this->nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nonce(), output);
  }

  // optional .xblab.Broadcast.Session session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->session(), output);
  }

  // optional .xblab.Broadcast.Prologue prologue = 4;
  if (has_prologue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prologue(), output);
  }

  // optional .xblab.Broadcast.Payload payload = 5;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->payload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Broadcast_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .xblab.Broadcast.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string nonce = 2;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nonce().data(), this->nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nonce(), target);
  }

  // optional .xblab.Broadcast.Session session = 3;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->session(), target);
  }

  // optional .xblab.Broadcast.Prologue prologue = 4;
  if (has_prologue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prologue(), target);
  }

  // optional .xblab.Broadcast.Payload payload = 5;
  if (has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->payload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Broadcast_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .xblab.Broadcast.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string nonce = 2;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nonce());
    }

    // optional .xblab.Broadcast.Session session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }

    // optional .xblab.Broadcast.Prologue prologue = 4;
    if (has_prologue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prologue());
    }

    // optional .xblab.Broadcast.Payload payload = 5;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->payload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Broadcast_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Broadcast_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Broadcast_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Broadcast_Data::MergeFrom(const Broadcast_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_session()) {
      mutable_session()->::xblab::Broadcast_Session::MergeFrom(from.session());
    }
    if (from.has_prologue()) {
      mutable_prologue()->::xblab::Broadcast_Prologue::MergeFrom(from.prologue());
    }
    if (from.has_payload()) {
      mutable_payload()->::xblab::Broadcast_Payload::MergeFrom(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Broadcast_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Broadcast_Data::CopyFrom(const Broadcast_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Broadcast_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  if (has_prologue()) {
    if (!this->prologue().IsInitialized()) return false;
  }
  if (has_payload()) {
    if (!this->payload().IsInitialized()) return false;
  }
  return true;
}

void Broadcast_Data::Swap(Broadcast_Data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(nonce_, other->nonce_);
    std::swap(session_, other->session_);
    std::swap(prologue_, other->prologue_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Broadcast_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Broadcast_Data_descriptor_;
  metadata.reflection = Broadcast_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Broadcast::kSignatureFieldNumber;
const int Broadcast::kDataFieldNumber;
#endif  // !_MSC_VER

Broadcast::Broadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Broadcast::InitAsDefaultInstance() {
  data_ = const_cast< ::xblab::Broadcast_Data*>(&::xblab::Broadcast_Data::default_instance());
}

Broadcast::Broadcast(const Broadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Broadcast::SharedCtor() {
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Broadcast::~Broadcast() {
  SharedDtor();
}

void Broadcast::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void Broadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Broadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Broadcast_descriptor_;
}

const Broadcast& Broadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xblab_2eproto();
  return *default_instance_;
}

Broadcast* Broadcast::default_instance_ = NULL;

Broadcast* Broadcast::New() const {
  return new Broadcast;
}

void Broadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::xblab::Broadcast_Data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Broadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string signature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .xblab.Broadcast.Data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Broadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->signature(), output);
  }

  // required .xblab.Broadcast.Data data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Broadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  // required .xblab.Broadcast.Data data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Broadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // required .xblab.Broadcast.Data data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Broadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Broadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Broadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Broadcast::MergeFrom(const Broadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_data()) {
      mutable_data()->::xblab::Broadcast_Data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Broadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Broadcast::CopyFrom(const Broadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Broadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void Broadcast::Swap(Broadcast* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Broadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Broadcast_descriptor_;
  metadata.reflection = Broadcast_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Transmission_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transmission_Type_descriptor_;
}
bool Transmission_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Transmission_Type Transmission::CRED;
const Transmission_Type Transmission::ENTER;
const Transmission_Type Transmission::TRANSMIT;
const Transmission_Type Transmission::EXIT;
const Transmission_Type Transmission::QUIT;
const Transmission_Type Transmission::Type_MIN;
const Transmission_Type Transmission::Type_MAX;
const int Transmission::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Transmission_Credential::kUsernameFieldNumber;
const int Transmission_Credential::kPasswordFieldNumber;
const int Transmission_Credential::kGroupFieldNumber;
const int Transmission_Credential::kPubKeyFieldNumber;
#endif  // !_MSC_VER

Transmission_Credential::Transmission_Credential()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transmission_Credential::InitAsDefaultInstance() {
}

Transmission_Credential::Transmission_Credential(const Transmission_Credential& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transmission_Credential::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transmission_Credential::~Transmission_Credential() {
  SharedDtor();
}

void Transmission_Credential::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (group_ != &::google::protobuf::internal::kEmptyString) {
    delete group_;
  }
  if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
    delete pub_key_;
  }
  if (this != default_instance_) {
  }
}

void Transmission_Credential::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transmission_Credential::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transmission_Credential_descriptor_;
}

const Transmission_Credential& Transmission_Credential::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xblab_2eproto();
  return *default_instance_;
}

Transmission_Credential* Transmission_Credential::default_instance_ = NULL;

Transmission_Credential* Transmission_Credential::New() const {
  return new Transmission_Credential;
}

void Transmission_Credential::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_group()) {
      if (group_ != &::google::protobuf::internal::kEmptyString) {
        group_->clear();
      }
    }
    if (has_pub_key()) {
      if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
        pub_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transmission_Credential::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group;
        break;
      }

      // required string group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pub_key;
        break;
      }

      // required string pub_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pub_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pub_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pub_key().data(), this->pub_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transmission_Credential::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // required string group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->group(), output);
  }

  // required string pub_key = 4;
  if (has_pub_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pub_key().data(), this->pub_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pub_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transmission_Credential::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required string group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group(), target);
  }

  // required string pub_key = 4;
  if (has_pub_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pub_key().data(), this->pub_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pub_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transmission_Credential::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required string group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group());
    }

    // required string pub_key = 4;
    if (has_pub_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pub_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transmission_Credential::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transmission_Credential* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transmission_Credential*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transmission_Credential::MergeFrom(const Transmission_Credential& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_pub_key()) {
      set_pub_key(from.pub_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transmission_Credential::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transmission_Credential::CopyFrom(const Transmission_Credential& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transmission_Credential::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Transmission_Credential::Swap(Transmission_Credential* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(group_, other->group_);
    std::swap(pub_key_, other->pub_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transmission_Credential::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transmission_Credential_descriptor_;
  metadata.reflection = Transmission_Credential_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Transmission_Payload::kIntentFieldNumber;
const int Transmission_Payload::kContentFieldNumber;
#endif  // !_MSC_VER

Transmission_Payload::Transmission_Payload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transmission_Payload::InitAsDefaultInstance() {
}

Transmission_Payload::Transmission_Payload(const Transmission_Payload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transmission_Payload::SharedCtor() {
  _cached_size_ = 0;
  intent_ = false;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transmission_Payload::~Transmission_Payload() {
  SharedDtor();
}

void Transmission_Payload::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Transmission_Payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transmission_Payload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transmission_Payload_descriptor_;
}

const Transmission_Payload& Transmission_Payload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xblab_2eproto();
  return *default_instance_;
}

Transmission_Payload* Transmission_Payload::default_instance_ = NULL;

Transmission_Payload* Transmission_Payload::New() const {
  return new Transmission_Payload;
}

void Transmission_Payload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    intent_ = false;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transmission_Payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool intent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intent_)));
          set_has_intent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transmission_Payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool intent = 1;
  if (has_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->intent(), output);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transmission_Payload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool intent = 1;
  if (has_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->intent(), target);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transmission_Payload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool intent = 1;
    if (has_intent()) {
      total_size += 1 + 1;
    }

    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transmission_Payload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transmission_Payload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transmission_Payload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transmission_Payload::MergeFrom(const Transmission_Payload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_intent()) {
      set_intent(from.intent());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transmission_Payload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transmission_Payload::CopyFrom(const Transmission_Payload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transmission_Payload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Transmission_Payload::Swap(Transmission_Payload* other) {
  if (other != this) {
    std::swap(intent_, other->intent_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transmission_Payload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transmission_Payload_descriptor_;
  metadata.reflection = Transmission_Payload_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Transmission_Data::kTypeFieldNumber;
const int Transmission_Data::kNonceFieldNumber;
const int Transmission_Data::kCredentialFieldNumber;
const int Transmission_Data::kPayloadFieldNumber;
#endif  // !_MSC_VER

Transmission_Data::Transmission_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transmission_Data::InitAsDefaultInstance() {
  credential_ = const_cast< ::xblab::Transmission_Credential*>(&::xblab::Transmission_Credential::default_instance());
  payload_ = const_cast< ::xblab::Transmission_Payload*>(&::xblab::Transmission_Payload::default_instance());
}

Transmission_Data::Transmission_Data(const Transmission_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transmission_Data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  credential_ = NULL;
  payload_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transmission_Data::~Transmission_Data() {
  SharedDtor();
}

void Transmission_Data::SharedDtor() {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete nonce_;
  }
  if (this != default_instance_) {
    delete credential_;
    delete payload_;
  }
}

void Transmission_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transmission_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transmission_Data_descriptor_;
}

const Transmission_Data& Transmission_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xblab_2eproto();
  return *default_instance_;
}

Transmission_Data* Transmission_Data::default_instance_ = NULL;

Transmission_Data* Transmission_Data::New() const {
  return new Transmission_Data;
}

void Transmission_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_nonce()) {
      if (nonce_ != &::google::protobuf::internal::kEmptyString) {
        nonce_->clear();
      }
    }
    if (has_credential()) {
      if (credential_ != NULL) credential_->::xblab::Transmission_Credential::Clear();
    }
    if (has_payload()) {
      if (payload_ != NULL) payload_->::xblab::Transmission_Payload::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transmission_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .xblab.Transmission.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::xblab::Transmission_Type_IsValid(value)) {
            set_type(static_cast< ::xblab::Transmission_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nonce;
        break;
      }

      // required string nonce = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nonce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nonce().data(), this->nonce().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_credential;
        break;
      }

      // optional .xblab.Transmission.Credential credential = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_credential:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_credential()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_payload;
        break;
      }

      // optional .xblab.Transmission.Payload payload = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transmission_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .xblab.Transmission.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string nonce = 2;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nonce().data(), this->nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nonce(), output);
  }

  // optional .xblab.Transmission.Credential credential = 3;
  if (has_credential()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->credential(), output);
  }

  // optional .xblab.Transmission.Payload payload = 4;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->payload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transmission_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .xblab.Transmission.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string nonce = 2;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nonce().data(), this->nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nonce(), target);
  }

  // optional .xblab.Transmission.Credential credential = 3;
  if (has_credential()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->credential(), target);
  }

  // optional .xblab.Transmission.Payload payload = 4;
  if (has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->payload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transmission_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .xblab.Transmission.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string nonce = 2;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nonce());
    }

    // optional .xblab.Transmission.Credential credential = 3;
    if (has_credential()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->credential());
    }

    // optional .xblab.Transmission.Payload payload = 4;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->payload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transmission_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transmission_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transmission_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transmission_Data::MergeFrom(const Transmission_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_credential()) {
      mutable_credential()->::xblab::Transmission_Credential::MergeFrom(from.credential());
    }
    if (from.has_payload()) {
      mutable_payload()->::xblab::Transmission_Payload::MergeFrom(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transmission_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transmission_Data::CopyFrom(const Transmission_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transmission_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_credential()) {
    if (!this->credential().IsInitialized()) return false;
  }
  if (has_payload()) {
    if (!this->payload().IsInitialized()) return false;
  }
  return true;
}

void Transmission_Data::Swap(Transmission_Data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(nonce_, other->nonce_);
    std::swap(credential_, other->credential_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transmission_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transmission_Data_descriptor_;
  metadata.reflection = Transmission_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Transmission::kSignatureFieldNumber;
const int Transmission::kDataFieldNumber;
#endif  // !_MSC_VER

Transmission::Transmission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transmission::InitAsDefaultInstance() {
  data_ = const_cast< ::xblab::Transmission_Data*>(&::xblab::Transmission_Data::default_instance());
}

Transmission::Transmission(const Transmission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transmission::SharedCtor() {
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transmission::~Transmission() {
  SharedDtor();
}

void Transmission::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void Transmission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transmission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transmission_descriptor_;
}

const Transmission& Transmission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xblab_2eproto();
  return *default_instance_;
}

Transmission* Transmission::default_instance_ = NULL;

Transmission* Transmission::New() const {
  return new Transmission;
}

void Transmission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::xblab::Transmission_Data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transmission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string signature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .xblab.Transmission.Data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transmission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->signature(), output);
  }

  // required .xblab.Transmission.Data data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transmission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  // required .xblab.Transmission.Data data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transmission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // required .xblab.Transmission.Data data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transmission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transmission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transmission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transmission::MergeFrom(const Transmission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_data()) {
      mutable_data()->::xblab::Transmission_Data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transmission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transmission::CopyFrom(const Transmission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transmission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void Transmission::Swap(Transmission* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transmission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transmission_descriptor_;
  metadata.reflection = Transmission_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xblab

// @@protoc_insertion_point(global_scope)
